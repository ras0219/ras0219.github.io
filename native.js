function instantiate(asmLibraryArg, wasmMemory, wasmTable) {

function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.object_set_innerhtml;
 var fimport$1 = env.object_add_class;
 var fimport$2 = env.object_append_child;
 var fimport$3 = env.object_remove_child;
 var fimport$4 = env.object_insert_before;
 var fimport$5 = env.document_get_element_by_id;
 var fimport$6 = env.free_object;
 var fimport$7 = env.register_callback_token;
 var fimport$8 = env.deregister_callback_token;
 var fimport$9 = env.abort;
 var fimport$10 = env.random;
 var fimport$11 = env.add_css_link;
 var fimport$12 = env.log;
 var fimport$13 = env.document_create_element;
 var global$0 = 2115360;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 1024 | 0;
 }
 
 function $1($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $2($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if ($2_1) {
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP8[$3_1 >> 0] = $1_1;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if ($2_1) {
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $45 = 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[1068 >> 2] | 0;
   if (($1_1 | 0) >= (1 | 0)) {
    label$3 : while (1) {
     $3_1 = HEAP32[($0_1 + 1072 | 0) >> 2] | 0;
     if (!(HEAPU8[($0_1 + 1076 | 0) >> 0] | 0 | $2_1 >>> 0 > $3_1 >>> 0 | 0)) {
      HEAP8[($0_1 + 1076 | 0) >> 0] = 1;
      $1_1 = $0_1;
      break label$1;
     }
     $0_1 = ($0_1 + $3_1 | 0) + 8 | 0;
     if (($0_1 | 0) < ($1_1 | 0)) {
      continue label$3
     }
     break label$3;
    }
   }
   $3_1 = $2_1 + 8 | 0;
   $0_1 = $1_1 + $3_1 | 0;
   if (($0_1 | 0) >= (2048001 | 0)) {
    fimport$9(2049072 | 0);
    $1_1 = HEAP32[1068 >> 2] | 0;
    $45 = $1_1 + $3_1 | 0;
   } else {
    $45 = $0_1
   }
   HEAP32[1068 >> 2] = $45;
   HEAP8[($1_1 + 1076 | 0) >> 0] = 1;
   HEAP32[($1_1 + 1072 | 0) >> 2] = $2_1;
  }
  return $1_1 + 1080 | 0 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  fimport$11(2049098 | 0);
  $1_1 = fimport$5(2049109 | 0) | 0;
  fimport$0($1_1 | 0, 2049114 | 0);
  $2_1 = (HEAP32[1064 >> 2] | 0) + 1 | 0;
  HEAP32[1064 >> 2] = $2_1;
  fimport$7($2_1 | 0, 1 | 0, $0_1 | 0);
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$8($3_1 | 0)
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  $8($0_1 | 0);
  $9($0_1 | 0);
  if ($1_1) {
   fimport$6($1_1 | 0)
  }
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  $8($0_1 | 0);
  $9($0_1 | 0);
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = Math_fround(0), $71 = 0, $89 = 0, $107 = 0, $125 = 0, $161 = 0, $6_1 = 0, $5_1 = 0, $147 = 0, $7_1 = 0, $185 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 - -64 | 0) >> 2] | 0;
  if (($2_1 | 0) != ($3_1 | 0)) {
   label$2 : while (1) {
    label$3 : {
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$3
     }
     $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     $1_1 = $1_1 + -4 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      fimport$9(2049086 | 0)
     }
     HEAP8[$1_1 >> 0] = 0;
    }
    $2_1 = $2_1 + 12 | 0;
    if (($3_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  }
  $3_1 = $0_1 + 48 | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
  $2_1 = 65;
  label$5 : while (1) {
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    $10($3_1 | 0);
    $71 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   } else {
    $71 = $1_1
   }
   HEAP8[$71 >> 0] = $2_1;
   $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    $10($3_1 | 0);
    $89 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   } else {
    $89 = $1_1
   }
   HEAP8[$89 >> 0] = $2_1;
   $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    $10($3_1 | 0);
    $107 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   } else {
    $107 = $1_1
   }
   HEAP8[$107 >> 0] = $2_1;
   $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    $10($3_1 | 0);
    $125 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   } else {
    $125 = $1_1
   }
   HEAP8[$125 >> 0] = $2_1;
   $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 & 255 | 0) >>> 0 < 78 >>> 0) {
    continue label$5
   }
   break label$5;
  };
  if (($1_1 - (HEAP32[$3_1 >> 2] | 0) | 0) >>> 0 >= 2 >>> 0) {
   $2_1 = 1;
   label$15 : while (1) {
    $5_1 = HEAPU8[($11($3_1 | 0, $2_1 | 0) | 0) >> 0] | 0;
    $147 = $3_1;
    label$16 : {
     $1_1 = $2_1 + 1 | 0;
     $8_1 = Math_fround(Math_fround(fimport$10()) * Math_fround($1_1 >>> 0));
     if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0) {
      $161 = ~~$8_1 >>> 0;
      break label$16;
     }
     $161 = 0;
    }
    $6_1 = $161;
    $7_1 = HEAPU8[($11($147 | 0, $6_1 | 0) | 0) >> 0] | 0;
    (wasm2js_i32$0 = $11($3_1 | 0, $2_1 | 0) | 0, wasm2js_i32$1 = $7_1), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
    (wasm2js_i32$0 = $11($3_1 | 0, $6_1 | 0) | 0, wasm2js_i32$1 = $5_1), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
    $2_1 = $1_1;
    if ($1_1 >>> 0 < ((HEAP32[($0_1 + 52 | 0) >> 2] | 0) - (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0) >>> 0) {
     continue label$15
    }
    break label$15;
   };
  }
  $12($0_1 | 0);
  $13($0_1 | 0);
  $185 = $0_1 + 60 | 0;
  $0_1 = $29($4_1 | 0) | 0;
  $14($185 | 0, $0_1 | 0);
  label$18 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$18
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$18
   }
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $26_1 = 0, $185 = 0, $232 = 0, $308 = 0, $383 = 0, $452 = 0, $490 = 0, $11_1 = 0, $207 = 0, $12_1 = 0, $496 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $544 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $9_1 = fimport$5(2049444 | 0) | 0;
  HEAP8[($2_1 + 19 | 0) >> 0] = 0;
  $26_1 = 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = $26_1;
  HEAP8[($2_1 + 16 | 0) >> 0] = $26_1 >>> 8 | 0;
  HEAP8[($2_1 + 17 | 0) >> 0] = $26_1 >>> 16 | 0;
  HEAP8[($2_1 + 18 | 0) >> 0] = $26_1 >>> 24 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[$0_1 >> 2] | 0;
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($5_1 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
       fimport$3($9_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
       if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
        break label$3
       }
      }
      $1_1 = $1_1 + 4 | 0;
      if (($5_1 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
     break label$2;
    }
    if (($1_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    $4_1 = $1_1 + 4 | 0;
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    label$6 : while (1) {
     label$7 : {
      $3_1 = HEAP32[$4_1 >> 2] | 0;
      if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
       fimport$3($9_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
       if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
        break label$7
       }
      }
      if (($1_1 | 0) != ($4_1 | 0)) {
       $15($1_1 | 0);
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = $3_1;
      }
      $1_1 = $1_1 + 4 | 0;
     }
     $4_1 = $4_1 + 4 | 0;
     if (($5_1 | 0) != ($4_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
    break label$1;
   }
   $1_1 = $5_1;
  }
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if (($3_1 | 0) != ($1_1 | 0)) {
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   label$11 : while (1) {
    $11_1 = $16($1_1 | 0) | 0;
    $1_1 = $1_1 + 4 | 0;
    if (($11_1 + 4 | 0 | 0) != ($3_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  HEAP32[$2_1 >> 2] = $0_1;
  $8_1 = $0_1 + 16 | 0;
  $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $2_1 + 8 | 0;
  $4_1 = 0;
  label$12 : {
   if (($1_1 | 0) == ($6_1 | 0)) {
    $6_1 = $1_1;
    $3_1 = 0;
    break label$12;
   }
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[$0_1 >> 2] | 0 | 0)) {
    break label$12
   }
   label$14 : while (1) {
    $1_1 = HEAP32[(($17($8_1 | 0, $4_1 | 0) | 0) + 4 | 0) >> 2] | 0;
    $5_1 = HEAP32[((HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $6_1 = $17($8_1 | 0, $4_1 | 0) | 0;
    label$15 : {
     if (($1_1 | 0) == ($5_1 | 0)) {
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1;
      (wasm2js_i32$0 = HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0, wasm2js_i32$1 = $4_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
      $4_1 = $4_1 + 1 | 0;
      break label$15;
     }
     if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0)) {
      (wasm2js_i32$0 = $17($8_1 | 0, $4_1 | 0) | 0, wasm2js_i32$1 = $4_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
      $19($2_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0);
      fimport$4($9_1 | 0, HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      $7_1 = $3_1 << 2 | 0;
      $6_1 = HEAP32[$0_1 >> 2] | 0;
      label$18 : {
       $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $185 = $6_1 + $7_1 | 0;
       if (($5_1 | 0) != ($1_1 | 0)) {
        break label$18
       }
       $1_1 = ($5_1 - $6_1 | 0) >> 2 | 0;
       $5_1 = $1_1 + 1 | 0;
       label$19 : while (1) {
        $1_1 = $1_1 << 1 | 0;
        if ($1_1 >>> 0 < $5_1 >>> 0) {
         continue label$19
        }
        break label$19;
       };
       $20($0_1 | 0, $1_1 | 0);
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $185 = (HEAP32[$0_1 >> 2] | 0) + $7_1 | 0;
      }
      $6_1 = $185;
      $207 = $0_1;
      if (($1_1 | 0) != ($6_1 | 0)) {
       $1_1 = $1_1 + -4 | 0;
       label$21 : while (1) {
        HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[$1_1 >> 2] = 0;
        $12_1 = $16($1_1 | 0) | 0;
        $1_1 = $1_1 + -4 | 0;
        if (($12_1 | 0) != ($6_1 | 0)) {
         continue label$21
        }
        break label$21;
       };
       $232 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      } else {
       $232 = $1_1
      }
      HEAP32[($207 + 4 | 0) >> 2] = $232 + 4 | 0;
      $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = 0;
      HEAP32[$6_1 >> 2] = $5_1;
      $4_1 = $4_1 + 1 | 0;
      $16($2_1 + 24 | 0 | 0) | 0;
      break label$15;
     }
     (wasm2js_i32$0 = HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0, wasm2js_i32$1 = -1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     fimport$1(HEAP32[((HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, 2049455 | 0);
    }
    $3_1 = $3_1 + 1 | 0;
    $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (($4_1 | 0) == (($1_1 - $6_1 | 0) >> 3 | 0 | 0)) {
     break label$12
    }
    if (($3_1 | 0) != (((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  if ((((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0) != ($3_1 | 0)) {
   label$24 : while (1) {
    (wasm2js_i32$0 = HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0, wasm2js_i32$1 = -1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    fimport$1(HEAP32[((HEAP32[($18($0_1 | 0, $3_1 | 0) | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, 2049455 | 0);
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0)) {
     continue label$24
    }
    break label$24;
   };
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $308 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  } else {
   $308 = $1_1
  }
  if ((($308 - $6_1 | 0) >> 3 | 0 | 0) != ($4_1 | 0)) {
   label$27 : while (1) {
    (wasm2js_i32$0 = $17($8_1 | 0, $4_1 | 0) | 0, wasm2js_i32$1 = $4_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    $19($2_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0);
    fimport$2($9_1 | 0, HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    label$28 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) != ($5_1 | 0)) {
      break label$28
     }
     $5_1 = $5_1 - (HEAP32[$0_1 >> 2] | 0) | 0;
     if (!$5_1) {
      $1_1 = $4(4 | 0) | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$0_1 >> 2] = $1_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 4 | 0;
      break label$28;
     }
     $20($0_1 | 0, $5_1 >> 1 | 0 | 0);
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 4 | 0;
    $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = 0;
    HEAP32[$1_1 >> 2] = $5_1;
    $16($2_1 + 24 | 0 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) >> 3 | 0 | 0)) {
     continue label$27
    }
    break label$27;
   }
  }
  $5_1 = $2_1 + 8 | 0 | 4 | 0;
  label$30 : {
   if (HEAP32[($2_1 + 8 | 0) >> 2] | 0) {
    HEAP32[($2_1 + 16 | 0) >> 2] = 0;
    $383 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    break label$30;
   }
   HEAP8[($2_1 + 19 | 0) >> 0] = 0;
   $383 = $5_1;
  }
  HEAP8[$383 >> 0] = 0;
  label$32 : {
   $6_1 = HEAP32[($0_1 - -64 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   $1_1 = $6_1 - $4_1 | 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$32
   }
   $3_1 = ($1_1 >>> 0) / (12 >>> 0) | 0;
   label$33 : while (1) {
    $1_1 = $3_1 + -1 | 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
    $6_1 = ($6_1 - $4_1 | 0 | 0) / (12 | 0) | 0;
    label$34 : {
     if (($3_1 | 0) >= (1 | 0)) {
      $3_1 = $1_1;
      if ($6_1 >>> 0 >= $1_1 >>> 0) {
       break label$34
      }
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $6_1;
     $21($2_1 + 20 | 0 | 0, $2_1 + 24 | 0 | 0);
     $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     $3_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    }
    $22($2_1 + 8 | 0 | 0, $4_1 + Math_imul($3_1, 12) | 0 | 0);
    if (($1_1 | 0) < (1 | 0)) {
     break label$32
    }
    $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    $3_1 = $1_1;
    continue label$33;
   };
  }
  $1_1 = fimport$5(2049476 | 0) | 0;
  fimport$0($1_1 | 0, (wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $5_1, wasm2js_i32$2 = HEAP32[($2_1 + 8 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
  if ($1_1) {
   fimport$6($1_1 | 0)
  }
  $1_1 = 0;
  label$37 : {
   if (HEAP32[($2_1 + 8 | 0) >> 2] | 0) {
    HEAP32[($2_1 + 16 | 0) >> 2] = 0;
    $452 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    break label$37;
   }
   HEAP8[($2_1 + 19 | 0) >> 0] = 0;
   $452 = $5_1;
  }
  HEAP8[$452 >> 0] = 0;
  if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
   label$40 : while (1) {
    $31($2_1 + 8 | 0 | 0, 2049483 | 0, 2049492 | 0) | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($1_1 >>> 0 < ((HEAP32[($0_1 + 32 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) >>> 0) {
     continue label$40
    }
    break label$40;
   }
  }
  $1_1 = fimport$5(2049493 | 0) | 0;
  fimport$0($1_1 | 0, (wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $5_1, wasm2js_i32$2 = HEAP32[($2_1 + 8 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
  if ($1_1) {
   fimport$6($1_1 | 0)
  }
  $1_1 = 0;
  label$42 : {
   if (HEAP32[($2_1 + 8 | 0) >> 2] | 0) {
    HEAP32[($2_1 + 16 | 0) >> 2] = 0;
    $490 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    break label$42;
   }
   HEAP8[($2_1 + 19 | 0) >> 0] = 0;
   $490 = $5_1;
  }
  HEAP8[$490 >> 0] = 0;
  $496 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $13_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $3_1 = $31($2_1 + 8 | 0 | 0, 2049501 | 0, 2049539 | 0) | 0;
  $33($3_1 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
  $6_1 = $31($3_1 | 0, 2049540 | 0, 2049566 | 0) | 0;
  $33($6_1 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0);
  $4_1 = $496 - $13_1 | 0;
  label$44 : while (1) {
   $14_1 = $1_1 + 2049568 | 0;
   $10_1 = $1_1 + 1 | 0;
   $1_1 = $10_1;
   if (HEAPU8[$14_1 >> 0] | 0) {
    continue label$44
   }
   break label$44;
  };
  $7_1 = $31($6_1 | 0, 2049567 | 0, $10_1 + 2049567 | 0 | 0) | 0;
  $32($7_1 | 0, $4_1 | 0);
  $8_1 = 0;
  $6_1 = 0;
  $4_1 = $10_1 + 2049568 | 0;
  if (HEAPU8[$4_1 >> 0] | 0) {
   $1_1 = 0;
   label$46 : while (1) {
    $15_1 = $1_1 + $10_1 | 0;
    $6_1 = $1_1 + 1 | 0;
    $1_1 = $6_1;
    if (HEAPU8[($15_1 + 2049569 | 0) >> 0] | 0) {
     continue label$46
    }
    break label$46;
   };
  }
  $544 = $7_1;
  $7_1 = $6_1 + $10_1 | 0;
  $4_1 = $31($544 | 0, $4_1 | 0, $7_1 + 2049568 | 0 | 0) | 0;
  $34($4_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $3_1 = $7_1 + 2049569 | 0;
  if (HEAPU8[$3_1 >> 0] | 0) {
   $0_1 = 0;
   label$48 : while (1) {
    $16_1 = $0_1 + $7_1 | 0;
    $8_1 = $0_1 + 1 | 0;
    $0_1 = $8_1;
    if (HEAPU8[($16_1 + 2049570 | 0) >> 0] | 0) {
     continue label$48
    }
    break label$48;
   };
  }
  $0_1 = $31($4_1 | 0, $3_1 | 0, (($6_1 + $8_1 | 0) + $10_1 | 0) + 2049569 | 0 | 0) | 0;
  $1_1 = fimport$5(2049663 | 0) | 0;
  fimport$0($1_1 | 0, (wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $5_1, wasm2js_i32$2 = HEAP32[($2_1 + 8 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
  if ($1_1) {
   fimport$6($1_1 | 0)
  }
  label$50 : {
   if (!(HEAP32[($2_1 + 8 | 0) >> 2] | 0)) {
    break label$50
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$50
   }
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
  if ($9_1) {
   fimport$6($9_1 | 0)
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
  if (!$1_1) {
   $1_1 = $4(1 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
   return;
  }
  $25($0_1 | 0, $1_1 << 1 | 0 | 0);
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0;
  if (!($4_1 >>> 0 >= $1_1 >>> 0 ? ($1_1 | 0) >= (0 | 0) : 0)) {
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $21($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0);
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $1_1 + $3_1 | 0 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2_1 = $0_1 + 48 | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   label$2 : while (1) {
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (($1_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $4_1 = 7;
    label$3 : while (1) {
     label$4 : {
      $23($0_1 | 0, HEAP8[($11($2_1 | 0, $1_1 + ($3_1 ^ -1 | 0) | 0 | 0) | 0) >> 0] | 0 | 0);
      $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
      $4_1 = $4_1 + -1 | 0;
      if (!$4_1) {
       break label$4
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (($3_1 | 0) != ($1_1 | 0)) {
       continue label$3
      }
     }
     break label$3;
    };
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2_1 = $0_1 + 48 | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   label$2 : while (1) {
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (($1_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $4_1 = 7;
    label$3 : while (1) {
     label$4 : {
      $24($0_1 | 0, HEAP8[($11($2_1 | 0, $1_1 + ($3_1 ^ -1 | 0) | 0 | 0) | 0) >> 0] | 0 | 0);
      $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
      $4_1 = $4_1 + -1 | 0;
      if (!$4_1) {
       break label$4
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (($3_1 | 0) != ($1_1 | 0)) {
       continue label$3
      }
     }
     break label$3;
    };
    if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $54 = 0, $103 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($3_1 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - (HEAP32[$0_1 >> 2] | 0) | 0;
   if (!$2_1) {
    $3_1 = $4(12 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$0_1 >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + 12 | 0;
    break label$1;
   }
   $2_1 = ($2_1 | 0) / (12 | 0) | 0;
   $5_1 = $2_1 << 1 | 0;
   $4_1 = $4(Math_imul($2_1, 24) | 0) | 0;
   label$3 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$3
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
     $2_1 = $4_1;
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = 0;
      $6_1 = $3_1 + 8 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      $54 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[$2_1 >> 2] = $54;
      HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[$6_1 >> 2] = 0;
      $2_1 = $2_1 + 12 | 0;
      $3_1 = $3_1 + 12 | 0;
      if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $3_1 = HEAP32[$0_1 >> 2] | 0;
    }
    if (!$3_1) {
     break label$3
    }
    $2_1 = $3_1 + -4 | 0;
    if (!(HEAPU8[$2_1 >> 0] | 0)) {
     fimport$9(2049086 | 0)
    }
    HEAP8[$2_1 >> 0] = 0;
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + Math_imul($5_1, 12) | 0;
   $3_1 = $4_1 + Math_imul(((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (12 | 0) | 0, 12) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  }
  HEAP32[$3_1 >> 2] = 0;
  $2_1 = $1_1 + 8 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $103 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $103;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 12 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  if ($1_1) {
   $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   if ($2_1) {
    fimport$6($2_1 | 0);
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   }
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if ($2_1) {
    fimport$8($2_1 | 0)
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1_1 = $1_1 + -4 | 0;
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  if ($1_1) {
   $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   if ($2_1) {
    fimport$6($2_1 | 0);
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   }
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if ($2_1) {
    fimport$8($2_1 | 0)
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1_1 = $1_1 + -4 | 0;
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  return $0_1 | 0;
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0) >> 3 | 0;
  if (!($4_1 >>> 0 >= $1_1 >>> 0 ? ($1_1 | 0) >= (0 | 0) : 0)) {
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $21($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0);
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 + ($1_1 << 3 | 0) | 0 | 0;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0) >> 2 | 0;
  if (!($4_1 >>> 0 >= $1_1 >>> 0 ? ($1_1 | 0) >= (0 | 0) : 0)) {
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $21($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0);
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $19($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $52 = 0, $88 = 0, $7_1 = 0, $82 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = $4(16 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = $3_1;
  $0_1 = (HEAP32[1064 >> 2] | 0) + 1 | 0;
  HEAP32[1064 >> 2] = $0_1;
  fimport$7($0_1 | 0, 2 | 0, $3_1 | 0);
  $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  if ($6_1) {
   fimport$8($6_1 | 0)
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = fimport$13(2049669 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  if ($6_1) {
   fimport$6($6_1 | 0);
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $5_1 = $17($5_1 + 16 | 0 | 0, $2_1 | 0) | 0;
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    $52 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP8[($0_1 + 11 | 0) >> 0] = 0;
   $52 = $0_1 + 4 | 0;
  }
  HEAP8[$52 >> 0] = 0;
  $0_1 = $31($0_1 | 0, 2049672 | 0, 2049701 | 0) | 0;
  $34($0_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $7_1 = $31($0_1 | 0, 2049702 | 0, 2049705 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  $31($31($7_1 | 0, $4_1 + 15 | 0 | 0, $4_1 + 16 | 0 | 0) | 0 | 0, 2049706 | 0, 2049710 | 0) | 0;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $0_1 = $1_1 + 4 | 0;
  $82 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  if (HEAP32[$1_1 >> 2] | 0) {
   $88 = HEAP32[$0_1 >> 2] | 0
  } else {
   $88 = $0_1
  }
  fimport$0($82 | 0, $88 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = $1_1 << 2 | 0;
  $2_1 = $4($5_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
    $3_1 = $2_1;
    label$3 : while (1) {
     $4_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $4_1;
     $3_1 = $3_1 + 4 | 0;
     $4_1 = $16($1_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($4_1 + 4 | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $1_1 = HEAP32[$0_1 >> 2] | 0;
   }
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1_1 + -4 | 0;
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 + $5_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0) | 0;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 11 | 0) >> 0] = 0;
  $4_1 = 0;
  HEAP8[($2_1 + 7 | 0) >> 0] = $4_1;
  HEAP8[($2_1 + 8 | 0) >> 0] = $4_1 >>> 8 | 0;
  HEAP8[($2_1 + 9 | 0) >> 0] = $4_1 >>> 16 | 0;
  HEAP8[($2_1 + 10 | 0) >> 0] = $4_1 >>> 24 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  $3_1 = $31($2_1 | 0, 2049370 | 0, 2049399 | 0) | 0;
  $32($3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $0_1 = $31($3_1 | 0, 2049400 | 0, 2049401 | 0) | 0;
  $33($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  $0_1 = $31($0_1 | 0, 2049402 | 0, 2049403 | 0) | 0;
  fimport$12((wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $2_1 | 4 | 0, wasm2js_i32$2 = HEAP32[$0_1 >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $19_1 = 0, $23_1 = 0, $8_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if (HEAPU8[2049465 >> 0] | 0) {
   label$2 : while (1) {
    $6_1 = $2_1 + 2049466 | 0;
    $4_1 = $2_1 + 1 | 0;
    $2_1 = $4_1;
    if (HEAPU8[$6_1 >> 0] | 0) {
     continue label$2
    }
    break label$2;
   }
  }
  $19_1 = $0_1;
  $0_1 = $4_1 + 2049465 | 0;
  $23_1 = $31($19_1 | 0, 2049465 | 0, $0_1 | 0) | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = (wasm2js_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $1_1 + 4 | 0, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $8_1 = $31($23_1 | 0, $3_1 | 0, $3_1 + (wasm2js_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0 | 0) | 0;
  if (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) {
   $3_1 = $0_1 + 2 | 0;
   $2_1 = 0;
   label$4 : while (1) {
    $7_1 = $2_1 + $3_1 | 0;
    $5_1 = $2_1 + 1 | 0;
    $2_1 = $5_1;
    if (HEAPU8[$7_1 >> 0] | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  $0_1 = $0_1 + 1 | 0;
  $31($8_1 | 0, $0_1 | 0, $0_1 + $5_1 | 0 | 0) | 0;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $60 = 0, $40 = 0, $49 = 0, $122 = 0, $162 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP8[($5_1 + 15 | 0) >> 0] = $1_1;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $2_1 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     $6_1 = $1_1 & 255 | 0;
     $2_1 = $4_1;
     label$4 : while (1) {
      if ((HEAPU8[$2_1 >> 0] | 0 | 0) == ($6_1 | 0)) {
       break label$3
      }
      $2_1 = $2_1 + 8 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
     break label$2;
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 40 | 0) >> 2] = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    $40 = $0_1;
    $2_1 = $2_1 + 8 | 0;
    if (($3_1 | 0) != ($2_1 | 0)) {
     label$6 : while (1) {
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $49 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1 + -8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $49;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $2_1 = $2_1 + 8 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $60 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    } else {
     $60 = $3_1
    }
    HEAP32[($40 + 20 | 0) >> 2] = $60 + -8 | 0;
    HEAP8[($5_1 + 11 | 0) >> 0] = 0;
    $16_1 = 0;
    HEAP8[($5_1 + 7 | 0) >> 0] = $16_1;
    HEAP8[($5_1 + 8 | 0) >> 0] = $16_1 >>> 8 | 0;
    HEAP8[($5_1 + 9 | 0) >> 0] = $16_1 >>> 16 | 0;
    HEAP8[($5_1 + 10 | 0) >> 0] = $16_1 >>> 24 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $26($5_1 | 0, 2049404 | 0, $5_1 + 15 | 0 | 0);
    $14($0_1 + 60 | 0 | 0, $5_1 | 0);
    if (!(HEAP32[$5_1 >> 2] | 0)) {
     break label$1
    }
    $0_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $0_1 = $0_1 + -4 | 0;
    if (!(HEAPU8[$0_1 >> 0] | 0)) {
     fimport$9(2049086 | 0)
    }
    HEAP8[$0_1 >> 0] = 0;
    break label$1;
   }
   label$9 : {
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$9
    }
    $4_1 = $2_1 - $4_1 | 0;
    if (!$4_1) {
     $3_1 = $4(8 | 0) | 0;
     HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $3_1 + 8 | 0;
     break label$9;
    }
    $6_1 = $4_1 >> 2 | 0;
    $4_1 = $4($4_1 << 1 | 0 | 0) | 0;
    label$11 : {
     if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
      break label$11
     }
     $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (($2_1 | 0) != (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
      $3_1 = $4_1;
      label$13 : while (1) {
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $122 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[$3_1 >> 2] = $122;
       HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = $3_1 + 8 | 0;
       $2_1 = $2_1 + 8 | 0;
       if (($2_1 | 0) != (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        continue label$13
       }
       break label$13;
      };
      $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     }
     if (!$2_1) {
      break label$11
     }
     $3_1 = $2_1 + -4 | 0;
     if (!(HEAPU8[$3_1 >> 0] | 0)) {
      fimport$9(2049086 | 0)
     }
     HEAP8[$3_1 >> 0] = 0;
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $4_1 + ($6_1 << 3 | 0) | 0;
    $3_1 = $4_1 + ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $3_1 | 0) | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 255;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $162 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $162;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 8 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $9_1 = 0, $57 = 0, $95 = 0, $5_1 = 0, $37 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $5_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$3_1 >> 0] | 0 | 0) == ($5_1 | 0)) {
       break label$3
      }
      $3_1 = $3_1 + 1 | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
     break label$2;
    }
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    $37 = $0_1;
    $3_1 = $3_1 + 1 | 0;
    if (($4_1 | 0) != ($3_1 | 0)) {
     label$6 : while (1) {
      HEAP8[($3_1 + -1 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $57 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    } else {
     $57 = $4_1
    }
    HEAP32[($37 + 32 | 0) >> 2] = $57 + -1 | 0;
    HEAP8[($2_1 + 11 | 0) >> 0] = 0;
    $9_1 = 0;
    HEAP8[($2_1 + 7 | 0) >> 0] = $9_1;
    HEAP8[($2_1 + 8 | 0) >> 0] = $9_1 >>> 8 | 0;
    HEAP8[($2_1 + 9 | 0) >> 0] = $9_1 >>> 16 | 0;
    HEAP8[($2_1 + 10 | 0) >> 0] = $9_1 >>> 24 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = 0;
    $26($2_1 | 0, 2049424 | 0, $2_1 + 15 | 0 | 0);
    $14($0_1 + 60 | 0 | 0, $2_1 | 0);
    if (!(HEAP32[$2_1 >> 2] | 0)) {
     break label$1
    }
    $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $0_1 = $0_1 + -4 | 0;
    if (!(HEAPU8[$0_1 >> 0] | 0)) {
     fimport$9(2049086 | 0)
    }
    HEAP8[$0_1 >> 0] = 0;
    break label$1;
   }
   if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
    $10($0_1 + 28 | 0 | 0);
    $95 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   } else {
    $95 = $4_1
   }
   HEAP8[$95 >> 0] = $1_1;
   HEAP32[($0_1 + 32 | 0) >> 2] = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = $4($1_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
    $3_1 = $4_1;
    label$3 : while (1) {
     HEAP8[$3_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
     $3_1 = $3_1 + 1 | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[$0_1 >> 2] | 0;
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$3_1 >> 0] = 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + $4_1 | 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0) | 0;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $30_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  if (HEAPU8[$1_1 >> 0] | 0) {
   $7_1 = $1_1 + 1 | 0;
   label$2 : while (1) {
    $9_1 = $3_1 + $7_1 | 0;
    $5_1 = $3_1 + 1 | 0;
    $3_1 = $5_1;
    if (HEAPU8[$9_1 >> 0] | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  $30_1 = $0_1;
  $0_1 = $1_1 + $5_1 | 0;
  $10_1 = $31($30_1 | 0, $1_1 | 0, $0_1 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
  $12_1 = $31($10_1 | 0, $4_1 + 15 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
  if (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) {
   $2_1 = $0_1 + 2 | 0;
   $3_1 = 0;
   label$4 : while (1) {
    $11_1 = $2_1 + $3_1 | 0;
    $6_1 = $3_1 + 1 | 0;
    $3_1 = $6_1;
    if (HEAPU8[$11_1 >> 0] | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  $0_1 = $0_1 + 1 | 0;
  $31($12_1 | 0, $0_1 | 0, $0_1 + $6_1 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, $29_1 = 0, $30_1 = 0, $6_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $8_1 = Math_fround(0), $7_1 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $148 = 0, $174 = 0, $249 = 0, $44 = 0, $45 = 0, $46 = 0, $353 = 0, $381 = 0, $105 = 0, $126 = 0, $151 = 0, $163 = 0, $233 = 0, $235 = 0, $310 = 0, $331 = 0, $342 = 0, $356 = 0, $400 = 0, $404 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if (($2_1 | 0) != (-1 | 0)) {
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = $17($3_1 + 16 | 0 | 0, $2_1 | 0) | 0;
   $0_1 = $1_1 + 27 | 0;
   HEAP8[$0_1 >> 0] = 3;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $29_1 = 0;
   HEAP8[($1_1 + 23 | 0) >> 0] = $29_1;
   HEAP8[($1_1 + 24 | 0) >> 0] = $29_1 >>> 8 | 0;
   HEAP8[($1_1 + 25 | 0) >> 0] = $29_1 >>> 16 | 0;
   HEAP8[($1_1 + 26 | 0) >> 0] = $29_1 >>> 24 | 0;
   $40 = 2049711;
   HEAP16[($1_1 + 20 | 0) >> 1] = HEAPU8[$40 >> 0] | 0 | ((HEAPU8[($40 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[($1_1 + 22 | 0) >> 0] = HEAPU8[2049713 >> 0] | 0;
   HEAP8[($1_1 + 23 | 0) >> 0] = 0;
   $4_1 = $3_1 + 60 | 0;
   $14($4_1 | 0, $1_1 + 16 | 0 | 0);
   label$2 : {
    if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $2_1 = $2_1 + -4 | 0;
    if (!(HEAPU8[$2_1 >> 0] | 0)) {
     fimport$9(2049086 | 0)
    }
    HEAP8[$2_1 >> 0] = 0;
   }
   HEAP8[$0_1 >> 0] = 0;
   $30_1 = 0;
   HEAP8[($1_1 + 23 | 0) >> 0] = $30_1;
   HEAP8[($1_1 + 24 | 0) >> 0] = $30_1 >>> 8 | 0;
   HEAP8[($1_1 + 25 | 0) >> 0] = $30_1 >>> 16 | 0;
   HEAP8[($1_1 + 26 | 0) >> 0] = $30_1 >>> 24 | 0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $26($1_1 + 16 | 0 | 0, 2049715 | 0, $5_1 | 0);
   $14($4_1 | 0, $1_1 + 16 | 0 | 0);
   label$4 : {
    if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    $0_1 = $0_1 + -4 | 0;
    if (!(HEAPU8[$0_1 >> 0] | 0)) {
     fimport$9(2049086 | 0)
    }
    HEAP8[$0_1 >> 0] = 0;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         $0_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
         $2_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
         if (($0_1 | 0) == ($2_1 | 0)) {
          break label$11
         }
         $6_1 = HEAPU8[$5_1 >> 0] | 0;
         label$12 : while (1) {
          if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($6_1 | 0)) {
           break label$11
          }
          $0_1 = $0_1 + 1 | 0;
          if (($2_1 | 0) != ($0_1 | 0)) {
           continue label$12
          }
          break label$12;
         };
         break label$10;
        }
        if (($0_1 | 0) == ($2_1 | 0)) {
         break label$10
        }
        HEAP8[($1_1 + 27 | 0) >> 0] = 0;
        $31_1 = 0;
        HEAP8[($1_1 + 23 | 0) >> 0] = $31_1;
        HEAP8[($1_1 + 24 | 0) >> 0] = $31_1 >>> 8 | 0;
        HEAP8[($1_1 + 25 | 0) >> 0] = $31_1 >>> 16 | 0;
        HEAP8[($1_1 + 26 | 0) >> 0] = $31_1 >>> 24 | 0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = 0;
        HEAP32[($1_1 + 16 | 0) >> 2] = 0;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        $30($1_1 + 16 | 0 | 0, 10 | 0);
        HEAP32[($1_1 + 24 | 0) >> 2] = 10;
        $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        i64toi32_i32$2 = 2049736;
        i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $105 = i64toi32_i32$0;
        i64toi32_i32$0 = $2_1;
        $32_1 = $105;
        HEAP8[$2_1 >> 0] = $32_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $32_1 >>> 8 | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $32_1 >>> 16 | 0;
        HEAP8[($2_1 + 3 | 0) >> 0] = $32_1 >>> 24 | 0;
        HEAP8[($2_1 + 4 | 0) >> 0] = i64toi32_i32$1;
        HEAP8[($2_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
        HEAP8[($2_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
        HEAP8[($2_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
        HEAP8[($2_1 + 10 | 0) >> 0] = 0;
        $41 = 2049744;
        $42 = $2_1 + 8 | 0;
        $43 = HEAPU8[$41 >> 0] | 0 | ((HEAPU8[($41 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[$42 >> 0] = $43;
        HEAP8[($42 + 1 | 0) >> 0] = $43 >>> 8 | 0;
        $14($4_1 | 0, $1_1 + 16 | 0 | 0);
        label$13 : {
         if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
          break label$13
         }
         $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
         if (!$2_1) {
          break label$13
         }
         $2_1 = $2_1 + -4 | 0;
         if (!(HEAPU8[$2_1 >> 0] | 0)) {
          fimport$9(2049086 | 0)
         }
         HEAP8[$2_1 >> 0] = 0;
        }
        $126 = $3_1;
        $0_1 = $0_1 + 1 | 0;
        $2_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        if (($0_1 | 0) != ($2_1 | 0)) {
         label$16 : while (1) {
          HEAP8[($0_1 + -1 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($2_1 | 0)) {
           continue label$16
          }
          break label$16;
         };
         $148 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        } else {
         $148 = $2_1
        }
        HEAP32[($126 + 32 | 0) >> 2] = $148 + -1 | 0;
        $151 = $3_1;
        $0_1 = $5_1 + 8 | 0;
        $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if (($0_1 | 0) != ($2_1 | 0)) {
         label$19 : while (1) {
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          $163 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1 + -8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $163;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $0_1 = $0_1 + 8 | 0;
          if (($0_1 | 0) != ($2_1 | 0)) {
           continue label$19
          }
          break label$19;
         };
         $174 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        } else {
         $174 = $2_1
        }
        HEAP32[($151 + 20 | 0) >> 2] = $174 + -8 | 0;
        HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
        break label$9;
       }
       HEAP8[($1_1 + 27 | 0) >> 0] = 0;
       $33_1 = 0;
       HEAP8[($1_1 + 23 | 0) >> 0] = $33_1;
       HEAP8[($1_1 + 24 | 0) >> 0] = $33_1 >>> 8 | 0;
       HEAP8[($1_1 + 25 | 0) >> 0] = $33_1 >>> 16 | 0;
       HEAP8[($1_1 + 26 | 0) >> 0] = $33_1 >>> 24 | 0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $0_1 = $31($1_1 + 16 | 0 | 0, 2049747 | 0, 2049761 | 0) | 0;
       $14($4_1 | 0, $0_1 | 0);
       label$21 : {
        if (!(HEAP32[$0_1 >> 2] | 0)) {
         break label$21
        }
        $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (!$0_1) {
         break label$21
        }
        $0_1 = $0_1 + -4 | 0;
        if (!(HEAPU8[$0_1 >> 0] | 0)) {
         fimport$9(2049086 | 0)
        }
        HEAP8[$0_1 >> 0] = 0;
       }
       $6_1 = $3_1 + 48 | 0;
       $0_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
       $2_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
       if (($0_1 | 0) != ($2_1 | 0)) {
        $23($3_1 | 0, HEAP8[($11($6_1 | 0, $0_1 + ($2_1 ^ -1 | 0) | 0 | 0) | 0) >> 0] | 0 | 0);
        HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + -1 | 0;
        $12($3_1 | 0);
       }
       $0_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       $2_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       if (($0_1 | 0) == ($2_1 | 0)) {
        break label$6
       }
       $233 = $1_1;
       $235 = $3_1 + 28 | 0;
       label$24 : {
        $8_1 = Math_fround(Math_fround(fimport$10()) * Math_fround(($0_1 - $2_1 | 0) >>> 0));
        if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0) {
         $249 = ~~$8_1 >>> 0;
         break label$24;
        }
        $249 = 0;
       }
       $5_1 = $249;
       $2_1 = HEAPU8[($11($235 | 0, $5_1 | 0) | 0) >> 0] | 0;
       HEAP8[($233 + 15 | 0) >> 0] = $2_1;
       HEAP8[($1_1 + 27 | 0) >> 0] = 0;
       $34_1 = 0;
       HEAP8[($1_1 + 23 | 0) >> 0] = $34_1;
       HEAP8[($1_1 + 24 | 0) >> 0] = $34_1 >>> 8 | 0;
       HEAP8[($1_1 + 25 | 0) >> 0] = $34_1 >>> 16 | 0;
       HEAP8[($1_1 + 26 | 0) >> 0] = $34_1 >>> 24 | 0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $26($1_1 + 16 | 0 | 0, 2049762 | 0, $1_1 + 15 | 0 | 0);
       $14($4_1 | 0, $1_1 + 16 | 0 | 0);
       label$26 : {
        if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
         break label$26
        }
        $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (!$0_1) {
         break label$26
        }
        $0_1 = $0_1 + -4 | 0;
        if (!(HEAPU8[$0_1 >> 0] | 0)) {
         fimport$9(2049086 | 0)
        }
        HEAP8[$0_1 >> 0] = 0;
       }
       label$28 : {
        $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if (($0_1 | 0) == ($7_1 | 0)) {
         break label$28
        }
        label$29 : while (1) {
         if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($2_1 | 0)) {
          break label$28
         }
         $0_1 = $0_1 + 8 | 0;
         if (($7_1 | 0) != ($0_1 | 0)) {
          continue label$29
         }
         break label$29;
        };
        break label$8;
       }
       if (($0_1 | 0) == ($7_1 | 0)) {
        break label$8
       }
       HEAP8[($1_1 + 27 | 0) >> 0] = 0;
       $35 = 0;
       HEAP8[($1_1 + 23 | 0) >> 0] = $35;
       HEAP8[($1_1 + 24 | 0) >> 0] = $35 >>> 8 | 0;
       HEAP8[($1_1 + 25 | 0) >> 0] = $35 >>> 16 | 0;
       HEAP8[($1_1 + 26 | 0) >> 0] = $35 >>> 24 | 0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $30($1_1 + 16 | 0 | 0, 10 | 0);
       HEAP32[($1_1 + 24 | 0) >> 2] = 10;
       $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       i64toi32_i32$2 = 2049783;
       i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $310 = i64toi32_i32$0;
       i64toi32_i32$0 = $2_1;
       $36 = $310;
       HEAP8[$2_1 >> 0] = $36;
       HEAP8[($2_1 + 1 | 0) >> 0] = $36 >>> 8 | 0;
       HEAP8[($2_1 + 2 | 0) >> 0] = $36 >>> 16 | 0;
       HEAP8[($2_1 + 3 | 0) >> 0] = $36 >>> 24 | 0;
       HEAP8[($2_1 + 4 | 0) >> 0] = i64toi32_i32$1;
       HEAP8[($2_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
       HEAP8[($2_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
       HEAP8[($2_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
       HEAP8[($2_1 + 10 | 0) >> 0] = 0;
       $44 = 2049791;
       $45 = $2_1 + 8 | 0;
       $46 = HEAPU8[$44 >> 0] | 0 | ((HEAPU8[($44 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
       HEAP8[$45 >> 0] = $46;
       HEAP8[($45 + 1 | 0) >> 0] = $46 >>> 8 | 0;
       $14($4_1 | 0, $1_1 + 16 | 0 | 0);
       label$30 : {
        if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
         break label$30
        }
        $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$30
        }
        $2_1 = $2_1 + -4 | 0;
        if (!(HEAPU8[$2_1 >> 0] | 0)) {
         fimport$9(2049086 | 0)
        }
        HEAP8[$2_1 >> 0] = 0;
       }
       $331 = $3_1;
       $0_1 = $0_1 + 8 | 0;
       $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
       if (($0_1 | 0) != ($2_1 | 0)) {
        label$33 : while (1) {
         i64toi32_i32$2 = $0_1;
         i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         $342 = i64toi32_i32$1;
         i64toi32_i32$1 = $0_1 + -8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $342;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $0_1 = $0_1 + 8 | 0;
         if (($0_1 | 0) != ($2_1 | 0)) {
          continue label$33
         }
         break label$33;
        };
        $353 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
       } else {
        $353 = $2_1
       }
       HEAP32[($331 + 20 | 0) >> 2] = $353 + -8 | 0;
       $356 = $3_1;
       $0_1 = ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + 1 | 0;
       $2_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       if (($0_1 | 0) != ($2_1 | 0)) {
        label$36 : while (1) {
         HEAP8[($0_1 + -1 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($2_1 | 0)) {
          continue label$36
         }
         break label$36;
        };
        $381 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       } else {
        $381 = $2_1
       }
       HEAP32[($356 + 32 | 0) >> 2] = $381 + -1 | 0;
       HEAP32[($3_1 + 44 | 0) >> 2] = (HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 1 | 0;
      }
      $12($3_1 | 0);
      break label$7;
     }
     HEAP8[($1_1 + 27 | 0) >> 0] = 0;
     $37 = 0;
     HEAP8[($1_1 + 23 | 0) >> 0] = $37;
     HEAP8[($1_1 + 24 | 0) >> 0] = $37 >>> 8 | 0;
     HEAP8[($1_1 + 25 | 0) >> 0] = $37 >>> 16 | 0;
     HEAP8[($1_1 + 26 | 0) >> 0] = $37 >>> 24 | 0;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $30($1_1 + 16 | 0 | 0, 14 | 0);
     HEAP32[($1_1 + 24 | 0) >> 2] = 14;
     $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = 2049794;
     i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $400 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     $38 = $400;
     HEAP8[$0_1 >> 0] = $38;
     HEAP8[($0_1 + 1 | 0) >> 0] = $38 >>> 8 | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = $38 >>> 16 | 0;
     HEAP8[($0_1 + 3 | 0) >> 0] = $38 >>> 24 | 0;
     HEAP8[($0_1 + 4 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[($0_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[($0_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[($0_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     HEAP8[($0_1 + 14 | 0) >> 0] = 0;
     i64toi32_i32$2 = 2049800;
     i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $404 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 6 | 0;
     $39 = $404;
     HEAP8[i64toi32_i32$1 >> 0] = $39;
     HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $39 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $39 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $39 >>> 24 | 0;
     HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
     HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
     $14($4_1 | 0, $1_1 + 16 | 0 | 0);
     label$38 : {
      if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
       break label$38
      }
      $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$38
      }
      $0_1 = $0_1 + -4 | 0;
      if (!(HEAPU8[$0_1 >> 0] | 0)) {
       fimport$9(2049086 | 0)
      }
      HEAP8[$0_1 >> 0] = 0;
     }
     $24($3_1 | 0, HEAP8[($11($6_1 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 48 | 0) >> 2] | 0) ^ -1 | 0) | 0 | 0) | 0) >> 0] | 0 | 0);
     HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + -1 | 0;
    }
    $13($3_1 | 0);
   }
   $9($3_1 | 0);
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $6($2($4(72 | 0) | 0 | 0, 0 | 0, 72 | 0) | 0 | 0);
  return 0 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1_1 = $0_1 + 7 | 0;
  $2_1 = 0;
  HEAP8[$1_1 >> 0] = $2_1;
  HEAP8[($1_1 + 1 | 0) >> 0] = $2_1 >>> 8 | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = $2_1 >>> 16 | 0;
  HEAP8[($1_1 + 3 | 0) >> 0] = $2_1 >>> 24 | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = 0;
  $30($0_1 | 0, 13 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, 2049356 | 0, 13 | 0) | 0;
  HEAP8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 13 | 0) >> 0] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 13;
  return $0_1 | 0;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
  $4_1 = $1_1 >>> 16 | 0 | $1_1 | 0;
  $1_1 = $4($4_1 + 1 | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    $3_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
    $3($1_1 | 0, $0_1 + 4 | 0 | 0, $3_1 + 1 | 0 | 0) | 0;
    break label$1;
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3($1_1 | 0, $2_1 | 0, $3_1 + 1 | 0 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $2_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    fimport$9(2049086 | 0)
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $4_1 + -6 | 0;
 }
 
 function $31($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $15_1 = 0, $36 = 0, $44 = 0, $62 = 0;
  $5_1 = $2_1 - $1_1 | 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if ($2_1) {
    $15_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $15_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
  }
  $3_1 = $15_1;
  $4_1 = $0_1 + 4 | 0;
  label$3 : {
   $3_1 = $3_1 + $5_1 | 0;
   if (($2_1 + 6 | 0) >>> 0 < $3_1 >>> 0) {
    $30($0_1 | 0, $3_1 | 0);
    $36 = HEAP32[$0_1 >> 2] | 0;
   } else {
    $36 = $2_1
   }
   if ($36) {
    $44 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    break label$3;
   }
   $44 = $4_1 + (HEAPU8[($4_1 + 7 | 0) >> 0] | 0) | 0;
  }
  $3($44 | 0, $1_1 | 0, $5_1 | 0) | 0;
  label$7 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $62 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $3_1 | 0;
    break label$7;
   }
   HEAP8[($4_1 + 7 | 0) >> 0] = $3_1;
   $62 = $4_1 + ($3_1 & 255 | 0) | 0;
  }
  HEAP8[$62 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    $31($0_1 | 0, 2049809 | 0, 2049810 | 0) | 0;
    break label$1;
   }
   $4_1 = $3_1 + 16 | 0;
   $2_1 = $4_1;
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $5_1 = ($1_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$2_1 >> 0] = $1_1 - Math_imul($5_1, 10) | 0 | 48 | 0;
    $7_1 = $1_1 >>> 0 > 9 >>> 0;
    $1_1 = $5_1;
    if ($7_1) {
     continue label$3
    }
    break label$3;
   };
   $31($0_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1_1 | 0) <= (-1 | 0)) {
    HEAP8[($2_1 + 15 | 0) >> 0] = 45;
    $32($31($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 16 | 0 | 0) | 0 | 0, 0 - $1_1 | 0 | 0);
    break label$1;
   }
   $32($0_1 | 0, $1_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $34($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $17_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $10_1 = 30768;
  HEAP8[($3_1 + 2 | 0) >> 0] = $10_1;
  HEAP8[($3_1 + 3 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $17_1 = -1;
   if ($1_1 >>> 0 > 16777215 >>> 0) {
    break label$1
   }
   $17_1 = -2;
   if ($1_1 & 16711680 | 0) {
    break label$1
   }
   $17_1 = $1_1 & 65280 | 0 ? -3 : -4;
  }
  $2_1 = $17_1;
  $1_1 = $3_1 + 4 | 0;
  $7_1 = -5 - $2_1 | 0;
  $8_1 = ($2_1 + $3_1 | 0) + 16 | 0;
  $2_1 = 0;
  label$2 : while (1) {
   $5_1 = HEAPU8[($2_1 + $8_1 | 0) >> 0] | 0;
   $4_1 = $5_1 & 15 | 0;
   $6_1 = $5_1 >>> 4 | 0;
   if ($2_1 | $6_1 | 0) {
    HEAP8[$1_1 >> 0] = $5_1 >>> 0 < 160 >>> 0 ? $6_1 | 48 | 0 : $6_1 + 87 | 0;
    $1_1 = $1_1 + 1 | 0;
   }
   HEAP8[$1_1 >> 0] = $4_1 >>> 0 < 10 >>> 0 ? $4_1 | 48 | 0 : $4_1 + 87 | 0;
   $1_1 = $1_1 + 1 | 0;
   $2_1 = $2_1 + -1 | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$2
   }
   break label$2;
  };
  $31($0_1 | 0, $3_1 + 2 | 0 | 0, $1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 var FUNCTION_TABLE = [null, $7, $27];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "get_callback_buffer": $0, 
  "call": $1, 
  "callback": $1, 
  "memset": $2, 
  "memcpy": $3, 
  "malloc": $4, 
  "free": $5, 
  "main": $28
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 2049072, "T3V0IG9mIG1lbW9yeQBEb3VibGUgZnJlZQBnb2Zpc2guY3NzAHJvb3QAPGRpdiBpZD0iZ2FtZSI+PGRpdiBpZD0iY3B1IiBjbGFzcz0ic2lkZSI+PHVsIGlkPSJjcHVkZWNrIiBjbGFzcz0iZGVjayI+PC91bD48L2Rpdj48ZGl2IGlkPSJib2FyZCIgY2xhc3M9Im1pZGRsZSI+PC9kaXY+PGRpdiBpZD0icGxheWVyIiBjbGFzcz0ic2lkZSI+PHVsIGlkPSJwbGF5ZXJkZWNrIiBjbGFzcz0iZGVjayI+PC91bD48L2Rpdj48ZGl2IGlkPSJsb2ciPjx1bCBpZD0ibG9nX3VsIj48L3VsPjwvZGl2PjwvZGl2PgBHYW1lIFN0YXJ0ZWQuAEVSUk9SOiB2ZWN0b3Igb3V0IG9mIGJvdW5kczogAFsAXQBZb3U6ICJQYWlyIG9mIAAncyEiAENQVTogIlBhaXIgb2YgACdzISIAcGxheWVyZGVjawByZW1vdmUtMXMAPGxpPgA8L2xpPgBsb2dfdWwAPGxpPjwvbGk+AGNwdWRlY2sAPGRpdiBpZD0iaW5uZXJib2FyZCI+PGRpdj5DUFUgcG9pbnRzOiAAPC9kaXY+PGRpdj5QbGF5ZXIgcG9pbnRzOiAAPC9kaXY+PGRpdj5EZWNrIHJlbWFpbmluZzogADwvZGl2PjxidXR0b24gb25jbGljaz0iamF2YXNjcmlwdDpjYWxsd2FzbSgAKSI+UmVzZXQ8L2J1dHRvbj48L2Rpdj4AYm9hcmQAbGkAPGEgaHJlZj0iamF2YXNjcmlwdDpjYWxsd2FzbSgAKSI+ADwvYT4APT09AFlvdTogIkhhdmUgYW55IAAncz8iAENQVTogIlllcyIAQ1BVOiAiR28gRmlzaCIAQ1BVOiAiSGF2ZSBhbnkgACdzPyIAWW91OiAiWWVzIgBZb3U6ICJHbyBGaXNoIgAw");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}