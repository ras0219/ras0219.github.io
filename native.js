function instantiate(asmLibraryArg, wasmMemory, wasmTable) {

function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.document_get_element_by_id;
 var fimport$1 = env.object_set_innerhtml;
 var fimport$2 = env.object_set_attribute;
 var fimport$3 = env.object_get_context;
 var fimport$4 = env.free_object;
 var fimport$5 = env.register_callback_token;
 var fimport$6 = env.deregister_callback_token;
 var fimport$7 = env.abort;
 var fimport$8 = env.log;
 var fimport$9 = env.window_device_pixel_ratio;
 var fimport$10 = env.canvas_set_extents;
 var fimport$11 = env.add_mouse_touch_event_listeners;
 var fimport$12 = env.canvas_get_extents;
 var fimport$13 = env.on_frame;
 var fimport$14 = env.context_fill_style;
 var fimport$15 = env.context_fill_rect;
 var fimport$16 = env.context_fill_text;
 var fimport$17 = env.context_begin_path;
 var fimport$18 = env.context_line_width;
 var fimport$19 = env.context_stroke_style;
 var fimport$20 = env.context_move_to;
 var fimport$21 = env.context_line_to;
 var fimport$22 = env.context_stroke;
 var fimport$23 = env.context_scale;
 var fimport$24 = env.context_font;
 var fimport$25 = env.context_stroke_rect;
 var global$0 = 2115168;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 1584 | 0;
 }
 
 function $1($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $2($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if ($2_1) {
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP8[$3_1 >> 0] = $1_1;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if ($2_1) {
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $45 = 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[1628 >> 2] | 0;
   if (($1_1 | 0) >= (1 | 0)) {
    label$3 : while (1) {
     $3_1 = HEAP32[($0_1 + 1632 | 0) >> 2] | 0;
     if (!(HEAPU8[($0_1 + 1636 | 0) >> 0] | 0 | $2_1 >>> 0 > $3_1 >>> 0 | 0)) {
      HEAP8[($0_1 + 1636 | 0) >> 0] = 1;
      $1_1 = $0_1;
      break label$1;
     }
     $0_1 = ($0_1 + $3_1 | 0) + 8 | 0;
     if (($0_1 | 0) < ($1_1 | 0)) {
      continue label$3
     }
     break label$3;
    }
   }
   $3_1 = $2_1 + 8 | 0;
   $0_1 = $1_1 + $3_1 | 0;
   if (($0_1 | 0) >= (2048001 | 0)) {
    fimport$7(1024 | 0);
    $1_1 = HEAP32[1628 >> 2] | 0;
    $45 = $1_1 + $3_1 | 0;
   } else {
    $45 = $0_1
   }
   HEAP32[1628 >> 2] = $45;
   HEAP8[($1_1 + 1636 | 0) >> 0] = 1;
   HEAP32[($1_1 + 1632 | 0) >> 2] = $2_1;
  }
  return $1_1 + 1640 | 0 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $3_1 = $4(225 | 0) | 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
    $1_1 = $3_1;
    label$3 : while (1) {
     HEAP8[$1_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[$0_1 >> 2] | 0;
   }
   if (!$2_1) {
    break label$1
   }
   $1_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + 225 | 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0) | 0;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  $3_1 = $25($2_1 | 0, 1217 | 0, 1246 | 0) | 0;
  $26($3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $0_1 = $25($3_1 | 0, 1247 | 0, 1248 | 0) | 0;
  $27($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  $0_1 = $25($0_1 | 0, 1249 | 0, 1250 | 0) | 0;
  fimport$8((wasm2js_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $0_1 + 4 | 0, wasm2js_i32$2 = HEAP32[$0_1 >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = $0_1 + -4 | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$0_1 >> 0] = 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $9($2($4(120 | 0) | 0 | 0, 0 | 0, 120 | 0) | 0 | 0);
  return 0 | 0;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $62 = 0, $72 = 0, $76 = 0, $87 = 0, $8_1 = 0, $9_1 = 0, $117 = 0, $122 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  $7_1 = fimport$0(1050 | 0) | 0;
  fimport$1($7_1 | 0, 1055 | 0);
  $2_1 = fimport$0(1073 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$4($3_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  fimport$2($2_1 | 0, 1075 | 0, 1081 | 0);
  $2_1 = fimport$3(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 1568 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$4($3_1 | 0);
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
  $23($0_1 | 0);
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 15;
  HEAP32[($1_1 + 16 | 0) >> 2] = 15;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $2($1_1 + 24 | 0 | 0, 0 | 0, 36 | 0) | 0;
  $2_1 = $4(450 | 0) | 0;
  $3_1 = $2_1 + 450 | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
  $2($2_1 | 0, 0 | 0, 450 | 0) | 0;
  $2_1 = $1_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = $3_1;
  $10($1_1 + 36 | 0 | 0);
  $10($1_1 + 48 | 0 | 0);
  i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $62 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $62;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $3_1 = i64toi32_i32$0 + 72 | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  $11$hi = i64toi32_i32$0;
  $72 = $2_1;
  $2_1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $76 = i64toi32_i32$0;
  i64toi32_i32$0 = $72;
  HEAP32[i64toi32_i32$0 >> 2] = $76;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = $1_1 + 40 | 0;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  $11$hi = i64toi32_i32$0;
  $3_1 = $0_1 + 88 | 0;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $87 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[$2_1 >> 2] = $87;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = $0_1 + 84 | 0;
  $2_1 = HEAP32[$5_1 >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
  $4_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  $6_1 = $1_1 + 52 | 0;
  $8_1 = HEAP32[$6_1 >> 2] | 0;
  $9_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
  $10_1 = $0_1 + 96 | 0;
  $3_1 = HEAP32[$10_1 >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
  $117 = $6_1;
  $6_1 = $0_1 + 100 | 0;
  HEAP32[$117 >> 2] = HEAP32[$6_1 >> 2] | 0;
  $122 = $4_1;
  $4_1 = $0_1 + 104 | 0;
  HEAP32[$122 >> 2] = HEAP32[$4_1 >> 2] | 0;
  HEAP32[$6_1 >> 2] = $8_1;
  HEAP32[$4_1 >> 2] = $5_1;
  HEAP32[$10_1 >> 2] = $9_1;
  if ($3_1) {
   $3_1 = $3_1 + -4 | 0;
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    fimport$7(1038 | 0);
    $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   }
   HEAP8[$3_1 >> 0] = 0;
  }
  if ($2_1) {
   $2_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  if ($2_1) {
   $2_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 1;
  $2_1 = $0_1 + 48 | 0;
  $11($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1121714176;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 2;
  $11($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1126825984;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 3;
  $11($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1130758144;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 0;
  $11($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1133576192;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 0;
  $12($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1112014848;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1112014848;
  HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 1135542272;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1137180672;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($1_1 + 15 | 0) >> 0] = 1;
  $12($2_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 15 | 0 | 0);
  $2_1 = (HEAP32[1624 >> 2] | 0) + 1 | 0;
  HEAP32[1624 >> 2] = $2_1;
  HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  fimport$5($2_1 | 0, 1 | 0, $0_1 | 0);
  $3_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$6($3_1 | 0)
  }
  HEAP32[($0_1 + 108 | 0) >> 2] = $2_1;
  $2_1 = (HEAP32[1624 >> 2] | 0) + 1 | 0;
  HEAP32[1624 >> 2] = $2_1;
  fimport$5($2_1 | 0, 2 | 0, $0_1 | 0);
  $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$6($3_1 | 0)
  }
  HEAP32[($0_1 + 112 | 0) >> 2] = $2_1;
  $2_1 = (HEAP32[1624 >> 2] | 0) + 1 | 0;
  HEAP32[1624 >> 2] = $2_1;
  fimport$5($2_1 | 0, 3 | 0, $0_1 | 0);
  $3_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
  if ($3_1) {
   fimport$6($3_1 | 0)
  }
  HEAP32[($0_1 + 116 | 0) >> 2] = $2_1;
  fimport$13($2_1 | 0);
  fimport$11(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0);
  if ($7_1) {
   fimport$4($7_1 | 0)
  }
  global$0 = $1_1 - -64 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
  if ($1_1 >>> 0 <= 224 >>> 0) {
   $6($0_1 | 0);
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
    label$3 : while (1) {
     HEAP8[$1_1 >> 0] = 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    }
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   return;
  }
  if (($1_1 | 0) != (225 | 0)) {
   $2_1 = $4(225 | 0) | 0;
   label$5 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$5
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = 0;
    label$6 : while (1) {
     HEAP8[($1_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != (225 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$5
    }
    $1_1 = $1_1 + -4 | 0;
    if (!(HEAPU8[$1_1 >> 0] | 0)) {
     fimport$7(1038 | 0)
    }
    HEAP8[$1_1 >> 0] = 0;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $1_1 = $2_1 + 225 | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  }
 }
 
 function $11($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if (($3_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
   $16($0_1 | 0);
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  HEAP8[($3_1 + 18 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($3_1 + 16 | 0) >> 1] = 0;
  i64toi32_i32$1 = $4_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 20 | 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = i64toi32_i32$1 + 16 | 0;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if (($3_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
   $16($0_1 | 0);
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  HEAP8[($3_1 + 17 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($3_1 + 16 | 0) >> 0] = 1;
  HEAP8[($3_1 + 18 | 0) >> 0] = 0;
  i64toi32_i32$1 = $4_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 20 | 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = i64toi32_i32$1 + 16 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $148 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $118 = 0, $134 = 0, $135 = 0, $139 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[1584 >> 2] | 0;
  $5_1 = HEAP32[1588 >> 2] | 0;
  $6_1 = HEAP32[1592 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    if (!(HEAPU8[$1_1 >> 0] | 0)) {
     if (!(HEAP32[($1_1 + 4 | 0) >> 2] | 0)) {
      break label$1
     }
    }
    $1_1 = $1_1 + 20 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = $2_1;
  }
  label$4 : {
   if ($4_1 >>> 0 > 4 >>> 0) {
    break label$4
   }
   $7_1 = Math_fround($5_1 | 0);
   $8_1 = Math_fround($6_1 | 0);
   label$5 : {
    switch ($4_1 - 1 | 0 | 0) {
    default:
     if (($1_1 | 0) != ($2_1 | 0)) {
      fimport$7(1107 | 0);
      $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      $16($0_1 + 20 | 0 | 0);
      $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     $18_1 = HEAPU8[($3_1 + 13 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 14 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[($2_1 + 1 | 0) >> 0] = $18_1;
     HEAP8[($2_1 + 2 | 0) >> 0] = $18_1 >>> 8 | 0;
     HEAP8[$2_1 >> 0] = 0;
     HEAP8[($2_1 + 16 | 0) >> 0] = 0;
     HEAPF32[($2_1 + 12 | 0) >> 2] = $8_1;
     HEAPF32[($2_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     $19_1 = HEAPU8[($3_1 + 10 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 11 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[($2_1 + 17 | 0) >> 0] = $19_1;
     HEAP8[($2_1 + 18 | 0) >> 0] = $19_1 >>> 8 | 0;
     HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($3_1 + 15 | 0) >> 0] | 0;
     HEAP8[($2_1 + 19 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0;
     HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 20 | 0;
     break label$4;
    case 2:
     if (($1_1 | 0) == ($2_1 | 0)) {
      fimport$7(1130 | 0)
     }
     HEAPF32[($1_1 + 8 | 0) >> 2] = $7_1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 1;
     HEAPF32[($1_1 + 12 | 0) >> 2] = $8_1;
     break label$4;
    case 1:
     if (($1_1 | 0) == ($2_1 | 0)) {
      fimport$7(1152 | 0)
     }
     HEAPF32[($1_1 + 8 | 0) >> 2] = $7_1;
     HEAPF32[($1_1 + 12 | 0) >> 2] = $8_1;
     break label$4;
    case 3:
     if (($1_1 | 0) == ($2_1 | 0)) {
      fimport$7(1174 | 0)
     }
     HEAPF32[($1_1 + 8 | 0) >> 2] = $7_1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 0;
     HEAPF32[($1_1 + 12 | 0) >> 2] = $8_1;
     break label$4;
    case 0:
     break label$5;
    };
   }
   $9_1 = $0_1;
   if (($1_1 | 0) == ($2_1 | 0)) {
    fimport$7(1194 | 0);
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   }
   $118 = $9_1;
   if (($2_1 | 0) != ($1_1 + 20 | 0 | 0)) {
    $2_1 = $2_1 + -20 | 0;
    label$17 : while (1) {
     HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     i64toi32_i32$2 = $1_1 + 28 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $134 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $134;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $135 = $1_1;
     $1_1 = $1_1 + 20 | 0;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $139 = i64toi32_i32$1;
     i64toi32_i32$1 = $135;
     HEAP32[i64toi32_i32$1 >> 2] = $139;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      continue label$17
     }
     break label$17;
    };
    $148 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   } else {
    $148 = $2_1
   }
   HEAP32[($118 + 24 | 0) >> 2] = $148 + -20 | 0;
  }
  $17($0_1 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $128 = 0, $6_1 = 0, $7_1 = 0, $98 = 0, $114 = 0, $115 = 0, $119 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[1584 >> 2] | 0;
  $5_1 = HEAP32[1588 >> 2] | 0;
  $6_1 = HEAP32[1592 >> 2] | 0;
  $7_1 = HEAP32[1596 >> 2] | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    if ((HEAPU8[$2_1 >> 0] | 0 | 0) == (1 | 0)) {
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
      break label$1
     }
    }
    $2_1 = $2_1 + 20 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = $1_1;
  }
  label$4 : {
   if ($4_1 >>> 0 > 2 >>> 0) {
    break label$4
   }
   $8_1 = Math_fround($6_1 | 0);
   $9_1 = Math_fround($7_1 | 0);
   label$5 : {
    switch ($4_1 - 1 | 0 | 0) {
    case 0:
     if (($1_1 | 0) != ($2_1 | 0)) {
      fimport$7(1251 | 0);
      $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      $16($0_1 + 20 | 0 | 0);
      $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     $18_1 = HEAPU8[($3_1 + 13 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 14 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[($1_1 + 1 | 0) >> 0] = $18_1;
     HEAP8[($1_1 + 2 | 0) >> 0] = $18_1 >>> 8 | 0;
     HEAP8[$1_1 >> 0] = 1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 1;
     HEAPF32[($1_1 + 12 | 0) >> 2] = $9_1;
     HEAPF32[($1_1 + 8 | 0) >> 2] = $8_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
     $19_1 = HEAPU8[($3_1 + 10 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 11 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[($1_1 + 17 | 0) >> 0] = $19_1;
     HEAP8[($1_1 + 18 | 0) >> 0] = $19_1 >>> 8 | 0;
     HEAP8[($1_1 + 3 | 0) >> 0] = HEAPU8[($3_1 + 15 | 0) >> 0] | 0;
     HEAP8[($1_1 + 19 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0;
     HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 20 | 0;
     break label$4;
    default:
     if (($1_1 | 0) == ($2_1 | 0)) {
      fimport$7(1273 | 0);
      break label$4;
     }
     HEAPF32[($2_1 + 8 | 0) >> 2] = $8_1;
     HEAPF32[($2_1 + 12 | 0) >> 2] = $9_1;
     break label$4;
    case 1:
     break label$5;
    };
   }
   if (($1_1 | 0) == ($2_1 | 0)) {
    fimport$7(1295 | 0);
    break label$4;
   }
   $98 = $0_1;
   if (($1_1 | 0) != ($2_1 + 20 | 0 | 0)) {
    $1_1 = $1_1 + -20 | 0;
    label$13 : while (1) {
     HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2_1 + 28 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $114 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $114;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $115 = $2_1;
     $2_1 = $2_1 + 20 | 0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $119 = i64toi32_i32$1;
     i64toi32_i32$1 = $115;
     HEAP32[i64toi32_i32$1 >> 2] = $119;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
    $128 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   } else {
    $128 = $1_1
   }
   HEAP32[($98 + 24 | 0) >> 2] = $128 + -20 | 0;
  }
  $17($0_1 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $5_1 = 0, $17_1 = 0, $18_1 = 0, $17$hi = 0, $18$hi = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $22_1 = Math_fround(0), $10_1 = 0, $12_1 = 0, $13_1 = 0, $11_1 = 0, $14_1 = 0, $23_1 = Math_fround(0), $625 = 0, $19_1 = 0, $905 = 0, $967 = 0, $1029 = 0, $186 = 0, $215 = 0, $248 = 0, $19$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $102 = 0, $114 = 0, $128 = 0, $776 = 0, $138 = 0, $1176 = 0, $1200 = 0, $1222 = 0, $1241 = 0, $139 = 0, $1453 = 0, $1472 = 0, $1491 = 0, $1510 = 0, $1531 = 0, $140 = 0, $1702 = 0, $1721 = 0, $1740 = 0, $1759 = 0, $1780 = 0, $141 = 0, $1864 = 0, $1889 = 0, $1912 = 0, $1932 = 0, $142 = 0, $2018 = 0, $2043 = 0, $2066 = 0, $2086 = 0, $171 = 0, $198 = 0, $231 = 0, $15_1 = 0, $27_1 = 0, $28 = 0, $619 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $1123 = 0, $1123$hi = 0, $29 = 0, $1177 = 0, $1180 = 0, $1180$hi = 0, $1183 = 0, $1183$hi = 0, $1184 = 0, $1201 = 0, $1204$hi = 0, $1206 = 0, $1223 = 0, $1242 = 0, $1314 = 0, $1314$hi = 0, $1376 = 0, $1379 = 0, $1379$hi = 0, $1382 = 0, $1382$hi = 0, $1398 = 0, $1401$hi = 0, $1416 = 0, $1432 = 0, $1563 = 0, $1563$hi = 0, $1625 = 0, $1628 = 0, $1628$hi = 0, $1631 = 0, $1631$hi = 0, $1647 = 0, $1650$hi = 0, $1665 = 0, $1681 = 0, $1813 = 0, $1813$hi = 0, $1865 = 0, $1868 = 0, $1868$hi = 0, $1871 = 0, $1871$hi = 0, $1872 = 0, $1890 = 0, $1893$hi = 0, $1895 = 0, $1913 = 0, $1933 = 0, $1967 = 0, $1967$hi = 0, $2019 = 0, $2022 = 0, $2022$hi = 0, $2025 = 0, $2025$hi = 0, $2026 = 0, $2044 = 0, $2047$hi = 0, $2049 = 0, $2067 = 0, $2087 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  $23($0_1 | 0);
  $6_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = $6_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  $2_1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
  i64toi32_i32$0 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = ((HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0) + 1 | 0 | 0) % (100 | 0) | 0;
  $10_1 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
  $5_1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
  $2_1 = $2_1 - $8_1 | 0;
  if ($2_1) {
   $2($8_1 | 0, 0 | 0, $2_1 | 0) | 0
  }
  HEAP32[($1_1 + 72 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 0;
  HEAP32[($1_1 + 64 | 0) >> 2] = 0;
  HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $19($1_1 | 0);
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  if ((($3_1 | 0) % (100 | 0) | 0 | 0) >= (50 | 0)) {
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
    $19($1_1 | 0);
    $102 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   } else {
    $102 = $2_1
   }
   i64toi32_i32$0 = $102;
   i64toi32_i32$1 = 2;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   $114 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  } else {
   $114 = $3_1
  }
  if ((($114 | 0) % (50 | 0) | 0 | 0) >= (25 | 0)) {
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
    $19($1_1 | 0);
    $128 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   } else {
    $128 = $2_1
   }
   i64toi32_i32$0 = $128;
   i64toi32_i32$1 = 4;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  }
  $11_1 = $0_1 + 72 | 0;
  label$9 : while (1) {
   label$10 : {
    label$11 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (($3_1 | 0) == ($2_1 | 0)) {
      $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$11
      }
      $12_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      if (($12_1 | 0) != (HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0)) {
       break label$10
      }
      $13_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      if (($13_1 | 0) != (HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0)) {
       break label$10
      }
      $9_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($9_1 | 0) != (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
       break label$10
      }
      $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $6_1 = ($10_1 | 0) % (100 | 0) | 0;
      $171 = $0_1;
      label$13 : {
       $7_1 = ($10_1 | 0) % (25 | 0) | 0;
       if (($7_1 | 0) >= (1 | 0)) {
        $186 = 0;
        if (!(((HEAPU8[($8_1 + Math_imul($5_1, 6) | 0) >> 0] | 0) & 1 | 0) ^ ($6_1 | 0) > (49 | 0) | 0)) {
         break label$13
        }
       }
       $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $186 = ($4_1 | 0) == (100 | 0) ? 100 : $4_1 + 1 | 0;
      }
      HEAP32[($171 + 36 | 0) >> 2] = $186;
      $14_1 = ($10_1 | 0) % (50 | 0) | 0;
      $198 = $0_1;
      label$15 : {
       if (($7_1 | 0) >= (3 | 0)) {
        $215 = 0;
        if (!(!((HEAPU8[($8_1 + ($5_1 << 3 | 0) | 0) >> 0] | 0) & 1 | 0) ^ (($14_1 | 0) < (25 | 0) | ($6_1 | 0) < (50 | 0) | 0) | 0)) {
         break label$15
        }
       }
       $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $215 = ($4_1 | 0) == (100 | 0) ? 100 : $4_1 + 1 | 0;
      }
      HEAP32[($198 + 40 | 0) >> 2] = $215;
      $4_1 = $10_1 + 96 | 0;
      $10_1 = ($4_1 | 0) % (100 | 0) | 0;
      $4_1 = ($4_1 | 0) % (50 | 0) | 0;
      $231 = $0_1;
      label$17 : {
       if (($7_1 | 0) >= (4 | 0)) {
        $248 = 0;
        if (!(!((HEAPU8[($8_1 + Math_imul($5_1, 10) | 0) >> 0] | 0) & 1 | 0) ^ (($4_1 | 0) > (24 | 0) ^ ($10_1 | 0) > (49 | 0) | 0) | 0)) {
         break label$17
        }
       }
       $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       $248 = ($4_1 | 0) == (100 | 0) ? 100 : $4_1 + 1 | 0;
      }
      HEAP32[($231 + 44 | 0) >> 2] = $248;
      if ($2_1) {
       $2_1 = $2_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      if ($9_1) {
       $2_1 = $9_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      if ($13_1) {
       $2_1 = $13_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      if ($12_1) {
       $2_1 = $12_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      if ($3_1) {
       $2_1 = $3_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      fimport$12(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 - -64 | 0 | 0);
      $2_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
      $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      fimport$14(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1315 | 0);
      fimport$15(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround($2_1 | 0)), Math_fround(Math_fround($3_1 | 0)));
      fimport$17(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
      fimport$18(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(1.0)));
      fimport$19(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1321 | 0);
      label$29 : {
       if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$29
       }
       $2_1 = -1;
       label$30 : while (1) {
        $2_1 = $2_1 + 1 | 0;
        $22_1 = Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0));
        fimport$20(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround($22_1), Math_fround(Math_fround(50.0)));
        fimport$21(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround($22_1), Math_fround(Math_fround(350.0)));
        $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
        if (($2_1 | 0) < ($3_1 | 0)) {
         continue label$30
        }
        break label$30;
       };
       if (($3_1 | 0) < (0 | 0)) {
        break label$29
       }
       $2_1 = -1;
       label$31 : while (1) {
        $2_1 = $2_1 + 1 | 0;
        $22_1 = Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0));
        fimport$20(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(50.0)), Math_fround($22_1));
        fimport$21(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(350.0)), Math_fround($22_1));
        if (($2_1 | 0) < (HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0)) {
         continue label$31
        }
        break label$31;
       };
      }
      $6_1 = $0_1 + 16 | 0;
      fimport$22(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
      label$32 : {
       $10_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
       if (($10_1 | 0) < (1 | 0)) {
        break label$32
       }
       $12_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
       $4_1 = 0;
       $5_1 = $10_1;
       label$33 : while (1) {
        $8_1 = $4_1 + 1 | 0;
        if (($5_1 | 0) >= (1 | 0)) {
         $15_1 = Math_imul($8_1, $10_1);
         $13_1 = Math_imul($4_1, $10_1);
         $23_1 = Math_fround(Math_fround(Math_fround($4_1 | 0) * Math_fround(20.0)) + Math_fround(50.0));
         $22_1 = Math_fround($23_1 + Math_fround(2.0));
         $23_1 = Math_fround($23_1 + Math_fround(18.0));
         $2_1 = 0;
         label$35 : while (1) {
          label$36 : {
           $5_1 = HEAPU8[(($18($11_1 | 0, Math_imul($4_1, $5_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
           if (!$5_1) {
            $3_1 = $2_1 + 1 | 0;
            break label$36;
           }
           label$38 : {
            $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
            if (($8_1 | 0) >= ($3_1 | 0)) {
             break label$38
            }
            $3_1 = HEAPU8[(($18($11_1 | 0, Math_imul($3_1, $8_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
            if (!$3_1 | ($5_1 | 0) != (1 | 0) | 0 ? !(($3_1 | 0) == ($5_1 | 0) | ($3_1 | 0) == (1 | 0) | 0) : 0) {
             break label$38
            }
            $7_1 = 1;
            $27_1 = ($3_1 | 0) == (1 | 0) ? $5_1 : $3_1;
            label$39 : {
             $3_1 = HEAP8[($12_1 + ($2_1 + $13_1 | 0) | 0) >> 0] | 0;
             $9_1 = HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $4_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
             if ((($9_1 | 2 | 0 | 0) == (3 | 0) ? $3_1 & 2 | 0 : 0) | ((($9_1 + -1 | 0) & 255 | 0) >>> 0 < 2 >>> 0 ? $3_1 & 4 | 0 : 0) | 0) {
              break label$39
             }
             $3_1 = HEAP8[($12_1 + ($2_1 + $15_1 | 0) | 0) >> 0] | 0;
             $9_1 = HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $8_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
             if (($9_1 | 2 | 0 | 0) == (3 | 0) ? $3_1 & 2 | 0 : 0) {
              break label$39
             }
             $7_1 = 0;
             if (!($3_1 & 4 | 0)) {
              break label$39
             }
             $7_1 = (($9_1 + -1 | 0) & 255 | 0) >>> 0 < 2 >>> 0;
            }
            $3_1 = $20($27_1 | 0, $7_1 | 0) | 0;
            fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0);
            fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0)) + Math_fround(2.0))), Math_fround($23_1), Math_fround(Math_fround(16.0)), Math_fround(Math_fround(4.0)));
           }
           label$40 : {
            $3_1 = $2_1 + 1 | 0;
            $7_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
            if (($3_1 | 0) >= ($7_1 | 0)) {
             break label$40
            }
            $9_1 = HEAPU8[(($18($11_1 | 0, Math_imul($4_1, $7_1) + $3_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
            if (!$9_1 | ($5_1 | 0) != (1 | 0) | 0 ? !(($9_1 | 0) == ($5_1 | 0) | ($9_1 | 0) == (1 | 0) | 0) : 0) {
             break label$40
            }
            $7_1 = 1;
            $28 = ($9_1 | 0) == (1 | 0) ? $5_1 : $9_1;
            label$41 : {
             $9_1 = HEAP8[($12_1 + ($2_1 + $13_1 | 0) | 0) >> 0] | 0;
             $14_1 = HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $4_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
             if ((($14_1 | 2 | 0 | 0) == (3 | 0) ? $9_1 & 2 | 0 : 0) | ((($14_1 + -1 | 0) & 255 | 0) >>> 0 < 2 >>> 0 ? $9_1 & 4 | 0 : 0) | 0) {
              break label$41
             }
             $9_1 = HEAP8[($12_1 + ($3_1 + $13_1 | 0) | 0) >> 0] | 0;
             $14_1 = HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $4_1) + $3_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
             if (($14_1 | 2 | 0 | 0) == (3 | 0) ? $9_1 & 2 | 0 : 0) {
              break label$41
             }
             $7_1 = 0;
             if (!($9_1 & 4 | 0)) {
              break label$41
             }
             $7_1 = (($14_1 + -1 | 0) & 255 | 0) >>> 0 < 2 >>> 0;
            }
            $7_1 = $20($28 | 0, $7_1 | 0) | 0;
            fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, $7_1 | 0);
            fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0)) + Math_fround(18.0))), Math_fround($22_1), Math_fround(Math_fround(4.0)), Math_fround(Math_fround(16.0)));
           }
           $9_1 = HEAP8[($12_1 + ($2_1 + $13_1 | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $4_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0;
           $619 = $5_1;
           label$42 : {
            if ($9_1 & 2 | 0) {
             $625 = 1;
             if (($14_1 | 2 | 0 | 0) == (3 | 0)) {
              break label$42
             }
            }
            $625 = 0;
            if (!($9_1 & 4 | 0)) {
             break label$42
            }
            $625 = (($14_1 + -1 | 0) & 255 | 0) >>> 0 < 2 >>> 0;
           }
           $5_1 = $20($619 | 0, $625 | 0) | 0;
           fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, $5_1 | 0);
           fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0)) + Math_fround(2.0))), Math_fround($22_1), Math_fround(Math_fround(16.0)), Math_fround(Math_fround(16.0)));
          }
          $2_1 = $3_1;
          $5_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
          if (($2_1 | 0) < ($5_1 | 0)) {
           continue label$35
          }
          break label$35;
         };
        }
        $4_1 = $8_1;
        if (($4_1 | 0) < ($5_1 | 0)) {
         continue label$33
        }
        break label$33;
       };
       if (($5_1 | 0) < (1 | 0)) {
        break label$32
       }
       $3_1 = 0;
       label$44 : while (1) {
        if (($5_1 | 0) <= (0 | 0)) {
         $776 = $3_1 + 1 | 0
        } else {
         $4_1 = $3_1 + 1 | 0;
         $22_1 = Math_fround(Math_fround(Math_fround($3_1 | 0) * Math_fround(20.0)) + Math_fround(50.0));
         $23_1 = Math_fround($22_1 + Math_fround(8.0));
         $24_1 = Math_fround($22_1 + Math_fround(12.0));
         $25_1 = Math_fround($22_1 + Math_fround(6.0));
         $26_1 = Math_fround($22_1 + Math_fround(7.900000095367432));
         $2_1 = 0;
         label$47 : while (1) {
          label$48 : {
           if (!(HEAPU8[($18($11_1 | 0, Math_imul($3_1, $5_1) + $2_1 | 0 | 0) | 0) >> 0] | 0)) {
            $2_1 = $2_1 + 1 | 0;
            break label$48;
           }
           fimport$14(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, ((HEAPU8[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + (Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $3_1) + $2_1 | 0) | 0) >> 0] | 0) & 1 | 0 ? 1535 : 1321) | 0);
           $22_1 = Math_fround(Math_fround(Math_fround($2_1 | 0) * Math_fround(20.0)) + Math_fround(50.0));
           label$50 : {
            if ((HEAPU8[(($18($11_1 | 0, Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, $3_1) + $2_1 | 0 | 0) | 0) + 1 | 0) >> 0] | 0 | 1 | 0 | 0) == (3 | 0)) {
             fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround($22_1 + Math_fround(6.0))), Math_fround($25_1), Math_fround(Math_fround(8.0)), Math_fround(Math_fround(8.0)));
             break label$50;
            }
            fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround($22_1 + Math_fround(7.900000095367432))), Math_fround($26_1), Math_fround(Math_fround(4.199999809265137)), Math_fround(Math_fround(4.199999809265137)));
           }
           label$52 : {
            $5_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
            if (($4_1 | 0) >= ($5_1 | 0)) {
             break label$52
            }
            if (!(HEAPU8[($18($11_1 | 0, Math_imul($4_1, $5_1) + $2_1 | 0 | 0) | 0) >> 0] | 0)) {
             break label$52
            }
            fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround($22_1 + Math_fround(8.0))), Math_fround($24_1), Math_fround(Math_fround(4.0)), Math_fround(Math_fround(16.0)));
           }
           $2_1 = $2_1 + 1 | 0;
           $5_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
           if (($2_1 | 0) >= ($5_1 | 0)) {
            break label$48
           }
           if (!(HEAPU8[($18($11_1 | 0, Math_imul($3_1, $5_1) + $2_1 | 0 | 0) | 0) >> 0] | 0)) {
            break label$48
           }
           fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround($22_1 + Math_fround(12.0))), Math_fround($23_1), Math_fround(Math_fround(16.0)), Math_fround(Math_fround(4.0)));
          }
          $5_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
          if (($2_1 | 0) < ($5_1 | 0)) {
           continue label$47
          }
          break label$47;
         };
         $776 = $4_1;
        }
        $3_1 = $776;
        if (($3_1 | 0) < ($5_1 | 0)) {
         continue label$44
        }
        break label$44;
       };
      }
      $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       label$54 : while (1) {
        label$55 : {
         if (HEAPU8[($2_1 + 16 | 0) >> 0] | 0) {
          fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, 1321 | 0);
          $4_1 = $2_1 + 4 | 0;
          $5_1 = $2_1 + 8 | 0;
          $8_1 = $2_1 + 12 | 0;
          fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[$2_1 >> 2])), Math_fround(Math_fround(HEAPF32[$4_1 >> 2])), Math_fround(Math_fround(HEAPF32[$5_1 >> 2])), Math_fround(Math_fround(HEAPF32[$8_1 >> 2])));
          if (!(HEAPU8[($2_1 + 17 | 0) >> 0] | 0)) {
           break label$55
          }
          fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, 1329 | 0);
          fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) + Math_fround(5.0))), Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) + Math_fround(5.0))), Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) + Math_fround(-10.0))), Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) + Math_fround(-10.0))));
          break label$55;
         }
         label$57 : {
          $4_1 = HEAPU8[($2_1 + 18 | 0) >> 0] | 0;
          if ($4_1 >>> 0 <= 3 >>> 0) {
           $5_1 = 1467;
           label$59 : {
            switch ($4_1 - 1 | 0 | 0) {
            default:
             fimport$19(HEAP32[$6_1 >> 2] | 0 | 0, 1337 | 0);
             fimport$25(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[$2_1 >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2])));
             break label$55;
            case 1:
             $5_1 = 1475;
             break label$57;
            case 0:
             break label$57;
            case 2:
             break label$59;
            };
           }
           $5_1 = 1483;
           break label$57;
          }
          fimport$7(1491 | 0);
          $5_1 = 1510;
         }
         fimport$14(HEAP32[$6_1 >> 2] | 0 | 0, $5_1 | 0);
         fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[$2_1 >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2])));
        }
        $2_1 = $2_1 + 20 | 0;
        if (($3_1 | 0) != ($2_1 | 0)) {
         continue label$54
        }
        break label$54;
       }
      }
      fimport$14(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1345 | 0);
      fimport$24(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1351 | 0);
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1362 | 0, Math_fround(Math_fround(17.0)), Math_fround(Math_fround(65.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1366 | 0, Math_fround(Math_fround(35.0)), Math_fround(Math_fround(105.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1368 | 0, Math_fround(Math_fround(35.0)), Math_fround(Math_fround(145.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1370 | 0, Math_fround(Math_fround(35.0)), Math_fround(Math_fround(185.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1372 | 0, Math_fround(Math_fround(35.0)), Math_fround(Math_fround(225.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1374 | 0, Math_fround(Math_fround(35.0)), Math_fround(Math_fround(265.0)));
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1376 | 0, Math_fround(Math_fround(475.0)), Math_fround(Math_fround(65.0)));
      label$62 : {
       $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (($2_1 | 0) == (100 | 0)) {
        $2_1 = $1_1 + 72 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP8[($1_1 + 75 | 0) >> 0] = 4;
        HEAP8[$2_1 >> 0] = 0;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = 0;
        HEAP32[($1_1 + 64 | 0) >> 2] = 0;
        HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($1_1 + 68 | 0) >> 2] = 623915057;
        $905 = $1_1 - -64 | 0 | 4 | 0;
        break label$62;
       }
       $3_1 = ($2_1 | 0) / (10 | 0) | 0;
       HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 32 | 0) >> 2] = $2_1 - Math_imul($3_1, 10) | 0;
       HEAP8[($1_1 + 16 | 0) >> 0] = 37;
       $21($1_1 - -64 | 0 | 0, $1_1 + 48 | 0 | 0, $1_1 + 32 | 0 | 0, $1_1 + 16 | 0 | 0);
       $905 = $1_1 - -64 | 0 | 4 | 0;
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$62
       }
       $905 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      }
      $2_1 = $905;
      fimport$16(HEAP32[$6_1 >> 2] | 0 | 0, $2_1 | 0, Math_fround(Math_fround(475.0)), Math_fround(Math_fround(85.0)));
      label$64 : {
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$64
       }
       $2_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$64
       }
       $2_1 = $2_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1387 | 0, Math_fround(Math_fround(520.0)), Math_fround(Math_fround(85.0)));
      label$66 : {
       $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       if (($2_1 | 0) == (100 | 0)) {
        $2_1 = $1_1 + 72 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP8[($1_1 + 75 | 0) >> 0] = 4;
        HEAP8[$2_1 >> 0] = 0;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = 0;
        HEAP32[($1_1 + 64 | 0) >> 2] = 0;
        HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($1_1 + 68 | 0) >> 2] = 623915057;
        $967 = $1_1 - -64 | 0 | 4 | 0;
        break label$66;
       }
       $3_1 = ($2_1 | 0) / (10 | 0) | 0;
       HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 32 | 0) >> 2] = $2_1 - Math_imul($3_1, 10) | 0;
       HEAP8[($1_1 + 16 | 0) >> 0] = 37;
       $21($1_1 - -64 | 0 | 0, $1_1 + 48 | 0 | 0, $1_1 + 32 | 0 | 0, $1_1 + 16 | 0 | 0);
       $967 = $1_1 - -64 | 0 | 4 | 0;
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$66
       }
       $967 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      }
      $2_1 = $967;
      fimport$16(HEAP32[$6_1 >> 2] | 0 | 0, $2_1 | 0, Math_fround(Math_fround(475.0)), Math_fround(Math_fround(105.0)));
      label$68 : {
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$68
       }
       $2_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$68
       }
       $2_1 = $2_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1412 | 0, Math_fround(Math_fround(520.0)), Math_fround(Math_fround(105.0)));
      label$70 : {
       $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       if (($2_1 | 0) == (100 | 0)) {
        $2_1 = $1_1 + 72 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP8[($1_1 + 75 | 0) >> 0] = 4;
        HEAP8[$2_1 >> 0] = 0;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = 0;
        HEAP32[($1_1 + 64 | 0) >> 2] = 0;
        HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($1_1 + 68 | 0) >> 2] = 623915057;
        $1029 = $1_1 - -64 | 0 | 4 | 0;
        break label$70;
       }
       $3_1 = ($2_1 | 0) / (10 | 0) | 0;
       HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 32 | 0) >> 2] = $2_1 - Math_imul($3_1, 10) | 0;
       HEAP8[($1_1 + 16 | 0) >> 0] = 37;
       $21($1_1 - -64 | 0 | 0, $1_1 + 48 | 0 | 0, $1_1 + 32 | 0 | 0, $1_1 + 16 | 0 | 0);
       $1029 = $1_1 - -64 | 0 | 4 | 0;
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$70
       }
       $1029 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      }
      $2_1 = $1029;
      fimport$16(HEAP32[$6_1 >> 2] | 0 | 0, $2_1 | 0, Math_fround(Math_fround(475.0)), Math_fround(Math_fround(125.0)));
      label$72 : {
       if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
        break label$72
       }
       $2_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$72
       }
       $2_1 = $2_1 + -4 | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        fimport$7(1038 | 0)
       }
       HEAP8[$2_1 >> 0] = 0;
      }
      fimport$16(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1440 | 0, Math_fround(Math_fround(520.0)), Math_fround(Math_fround(125.0)));
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $2_1 = $3_1;
      label$74 : {
       label$75 : {
        label$76 : {
         $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         if (($2_1 | 0) == ($0_1 | 0)) {
          break label$76
         }
         $2_1 = $3_1;
         label$77 : while (1) {
          if (HEAPU8[($2_1 + 16 | 0) >> 0] | 0) {
           break label$76
          }
          $2_1 = $2_1 + 20 | 0;
          if (($0_1 | 0) != ($2_1 | 0)) {
           continue label$77
          }
          break label$77;
         };
         break label$75;
        }
        if (($0_1 | 0) != ($2_1 | 0)) {
         break label$74
        }
       }
       $2_1 = $3_1;
      }
      if (($0_1 | 0) != ($2_1 | 0)) {
       fimport$15(HEAP32[$6_1 >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) + Math_fround(-5.0))), Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]) + Math_fround(-5.0))), Math_fround(Math_fround(10.0)), Math_fround(Math_fround(10.0)))
      }
      global$0 = $1_1 + 80 | 0;
      return;
     }
     label$79 : while (1) {
      i64toi32_i32$2 = $22($1_1 | 0, (($2_1 - $3_1 | 0) >> 3 | 0) + -1 | 0 | 0) | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$0;
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -8 | 0;
      label$80 : {
       $1123 = i64toi32_i32$1;
       $1123$hi = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $138 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $138 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $18_1 = $138;
       $18$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1123$hi;
       i64toi32_i32$0 = $1123;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$3 = $18_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if ((i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0) < (0 | 0)) {
        break label$80
       }
       i64toi32_i32$2 = $17$hi;
       $2_1 = $17_1;
       if (($5_1 | 0) <= ($2_1 | 0)) {
        break label$80
       }
       i64toi32_i32$2 = $18$hi;
       $3_1 = $18_1;
       if (($5_1 | 0) <= ($3_1 | 0)) {
        break label$80
       }
       $2_1 = Math_imul($3_1, $5_1) + $2_1 | 0;
       $3_1 = $8_1 + $2_1 | 0;
       $4_1 = HEAPU8[$3_1 >> 0] | 0;
       if ($4_1 & 1 | 0) {
        break label$80
       }
       $2_1 = $10_1 + ($2_1 << 1 | 0) | 0;
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        break label$80
       }
       $29 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
       HEAP8[$3_1 >> 0] = $4_1 | 1 | 0;
       $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
        $19($1_1 | 0);
        $1176 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       } else {
        $1176 = $3_1
       }
       $1177 = $1176;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$1 = $17_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       $18$hi = i64toi32_i32$0;
       $1180 = $18_1;
       $1180$hi = i64toi32_i32$0;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1183 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $1183$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1180$hi;
       i64toi32_i32$5 = $1180;
       i64toi32_i32$0 = $1183$hi;
       i64toi32_i32$3 = $1183;
       i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
       $1184 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
       i64toi32_i32$5 = $1177;
       HEAP32[i64toi32_i32$5 >> 2] = $1184;
       HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
        $19($1_1 | 0);
        $1200 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       } else {
        $1200 = $3_1
       }
       $1201 = $1200;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $17_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
       $1204$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $1204$hi;
       i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $18_1;
       i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
       $1206 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
       i64toi32_i32$4 = $1201;
       HEAP32[i64toi32_i32$4 >> 2] = $1206;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
        $19($1_1 | 0);
        $1222 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       } else {
        $1222 = $3_1
       }
       $1223 = $1222;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $17_1;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       i64toi32_i32$2 = $1223;
       HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
        $19($1_1 | 0);
        $1241 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       } else {
        $1241 = $3_1
       }
       $1242 = $1241;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$0 = $17_1;
       i64toi32_i32$2 = 1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = $1242;
       HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
       $2_1 = $29 + -2 | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$80
       }
       if ($2_1 - 1 | 0) {
        $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
        if (($3_1 | 0) == (HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0)) {
         $19($1_1 - -64 | 0 | 0);
         $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
        }
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$0 = $3_1;
        HEAP32[i64toi32_i32$0 >> 2] = $17_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
        HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0 + 8 | 0;
        break label$80;
       }
       $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
       if (($3_1 | 0) == (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
        $19($1_1 + 48 | 0 | 0);
        $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
       }
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$0 = $3_1;
       HEAP32[i64toi32_i32$0 >> 2] = $17_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
       HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0 + 8 | 0;
      }
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$79
      }
      break label$79;
     };
     $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
     $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    }
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$10
    }
    label$92 : while (1) {
     i64toi32_i32$1 = $22($1_1 - -64 | 0 | 0, (($3_1 - $4_1 | 0) >> 3 | 0) + -1 | 0 | 0) | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$0;
     $3_1 = $3_1 + -8 | 0;
     HEAP32[($1_1 + 68 | 0) >> 2] = $3_1;
     label$93 : {
      $1314 = i64toi32_i32$5;
      $1314$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $139 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $139 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
      }
      $18_1 = $139;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1314$hi;
      i64toi32_i32$0 = $1314;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      if ((i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0) < (0 | 0)) {
       break label$93
      }
      i64toi32_i32$1 = $17$hi;
      $2_1 = $17_1;
      if (($5_1 | 0) <= ($2_1 | 0)) {
       break label$93
      }
      i64toi32_i32$1 = $18$hi;
      $4_1 = $18_1;
      if (($5_1 | 0) <= ($4_1 | 0)) {
       break label$93
      }
      $4_1 = Math_imul($4_1, $5_1) + $2_1 | 0;
      $12_1 = $8_1 + $4_1 | 0;
      $13_1 = HEAPU8[$12_1 >> 0] | 0;
      if ($13_1 & 4 | 0) {
       break label$93
      }
      $2_1 = 0;
      $7_1 = HEAPU8[(($10_1 + ($4_1 << 1 | 0) | 0) + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (1 | 0)) {
       $2_1 = ((HEAPU8[($4_1 + $6_1 | 0) >> 0] | 0) & 8 | 0) >>> 3 | 0
      }
      if ($2_1 ? 0 : ($7_1 | 0) != (2 | 0)) {
       break label$93
      }
      HEAP8[$12_1 >> 0] = $13_1 | 4 | 0;
      $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      $2_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       $19($1_1 - -64 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $2_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      }
      $1376 = $3_1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      $1379 = $18_1;
      $1379$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
      $1382 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $1382$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1379$hi;
      i64toi32_i32$4 = $1379;
      i64toi32_i32$0 = $1382$hi;
      i64toi32_i32$3 = $1382;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $19_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $1376;
      HEAP32[i64toi32_i32$4 >> 2] = $19_1;
      HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 68 | 0) >> 2] = $3_1;
      if (($2_1 | 0) == ($3_1 | 0)) {
       $19($1_1 - -64 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $2_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      }
      $1398 = $3_1;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $1401$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $1401$hi;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $1398;
      HEAP32[i64toi32_i32$2 >> 2] = $18_1;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 68 | 0) >> 2] = $3_1;
      if (($2_1 | 0) == ($3_1 | 0)) {
       $19($1_1 - -64 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      }
      $1416 = $3_1;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $1416;
      HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 68 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 - -64 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      }
      $1432 = $3_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $1432;
      HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 68 | 0) >> 2] = $3_1;
      $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1453 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1453 = $2_1
      }
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$0 = $1453;
      HEAP32[i64toi32_i32$0 >> 2] = $19_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      $2_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1472 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1472 = $2_1
      }
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$0 = $1472;
      HEAP32[i64toi32_i32$0 >> 2] = $18_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      $2_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1491 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1491 = $2_1
      }
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$0 = $1491;
      HEAP32[i64toi32_i32$0 >> 2] = $20_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      $2_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1510 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1510 = $2_1
      }
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$0 = $1510;
      HEAP32[i64toi32_i32$0 >> 2] = $21_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      if (($7_1 | 0) != (2 | 0)) {
       break label$93
      }
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
       $19($1_1 | 0);
       $1531 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      } else {
       $1531 = $2_1
      }
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = $1531;
      HEAP32[i64toi32_i32$0 >> 2] = $17_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
     }
     $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      continue label$92
     }
     break label$92;
    };
   }
   $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
   if (($3_1 | 0) != ($2_1 | 0)) {
    label$110 : while (1) {
     i64toi32_i32$5 = $22($1_1 + 48 | 0 | 0, (($3_1 - $2_1 | 0) >> 3 | 0) + -1 | 0 | 0) | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$0;
     $3_1 = $3_1 + -8 | 0;
     HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
     label$111 : {
      $1563 = i64toi32_i32$4;
      $1563$hi = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $140 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $140 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $18_1 = $140;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1563$hi;
      i64toi32_i32$0 = $1563;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if ((i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0) < (0 | 0)) {
       break label$111
      }
      i64toi32_i32$5 = $17$hi;
      $2_1 = $17_1;
      if (($5_1 | 0) <= ($2_1 | 0)) {
       break label$111
      }
      i64toi32_i32$5 = $18$hi;
      $4_1 = $18_1;
      if (($5_1 | 0) <= ($4_1 | 0)) {
       break label$111
      }
      $4_1 = Math_imul($4_1, $5_1) + $2_1 | 0;
      $12_1 = $8_1 + $4_1 | 0;
      $13_1 = HEAPU8[$12_1 >> 0] | 0;
      if ($13_1 & 2 | 0) {
       break label$111
      }
      $2_1 = 0;
      $7_1 = HEAPU8[(($10_1 + ($4_1 << 1 | 0) | 0) + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (1 | 0)) {
       $2_1 = !((HEAPU8[($4_1 + $6_1 | 0) >> 0] | 0) & 16 | 0)
      }
      if ($2_1 ? 0 : ($7_1 | 0) != (3 | 0)) {
       break label$111
      }
      HEAP8[$12_1 >> 0] = $13_1 | 2 | 0;
      $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      $2_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       $19($1_1 + 48 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
       $2_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      }
      $1625 = $3_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      $1628 = $18_1;
      $1628$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $1631 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $1631$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1628$hi;
      i64toi32_i32$2 = $1628;
      i64toi32_i32$0 = $1631$hi;
      i64toi32_i32$3 = $1631;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $19_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $1625;
      HEAP32[i64toi32_i32$2 >> 2] = $19_1;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
      if (($2_1 | 0) == ($3_1 | 0)) {
       $19($1_1 + 48 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
       $2_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      }
      $1647 = $3_1;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $1650$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $1650$hi;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $1647;
      HEAP32[i64toi32_i32$1 >> 2] = $18_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
      if (($2_1 | 0) == ($3_1 | 0)) {
       $19($1_1 + 48 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      }
      $1665 = $3_1;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $1665;
      HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 48 | 0 | 0);
       $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      }
      $1681 = $3_1;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$5 = 1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $1681;
      HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
      $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $1702 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $1702 = $2_1
      }
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $1702;
      HEAP32[i64toi32_i32$0 >> 2] = $19_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $2_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $1721 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $1721 = $2_1
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$0 = $1721;
      HEAP32[i64toi32_i32$0 >> 2] = $18_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $2_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $1740 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $1740 = $2_1
      }
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$0 = $1740;
      HEAP32[i64toi32_i32$0 >> 2] = $20_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $2_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $1759 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $1759 = $2_1
      }
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $1759;
      HEAP32[i64toi32_i32$0 >> 2] = $21_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      if (($7_1 | 0) != (3 | 0)) {
       break label$111
      }
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
       $19($1_1 | 0);
       $1780 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      } else {
       $1780 = $2_1
      }
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = $1780;
      HEAP32[i64toi32_i32$0 >> 2] = $17_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0;
     }
     $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$110
     }
     break label$110;
    }
   }
   $3_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   if (($3_1 | 0) != ($2_1 | 0)) {
    label$128 : while (1) {
     i64toi32_i32$4 = $22($1_1 + 32 | 0 | 0, (($3_1 - $2_1 | 0) >> 3 | 0) + -1 | 0 | 0) | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $3_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + -8 | 0;
     HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
     label$129 : {
      $1813 = i64toi32_i32$2;
      $1813$hi = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $141 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $141 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $18_1 = $141;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1813$hi;
      i64toi32_i32$0 = $1813;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      if ((i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0) < (0 | 0)) {
       break label$129
      }
      i64toi32_i32$4 = $17$hi;
      $2_1 = $17_1;
      if (($5_1 | 0) <= ($2_1 | 0)) {
       break label$129
      }
      i64toi32_i32$4 = $18$hi;
      $4_1 = $18_1;
      if (($5_1 | 0) <= ($4_1 | 0)) {
       break label$129
      }
      $2_1 = Math_imul($4_1, $5_1) + $2_1 | 0;
      $4_1 = $8_1 + $2_1 | 0;
      $7_1 = HEAPU8[$4_1 >> 0] | 0;
      if ($7_1 & 16 | 0) {
       break label$129
      }
      if ((HEAPU8[(($10_1 + ($2_1 << 1 | 0) | 0) + 1 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$129
      }
      HEAP8[$4_1 >> 0] = $7_1 | 16 | 0;
      $3_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      if (($3_1 | 0) == (HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1864 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1864 = $3_1
      }
      $1865 = $1864;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      $1868 = $18_1;
      $1868$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $1871 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $1871$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1868$hi;
      i64toi32_i32$1 = $1868;
      i64toi32_i32$0 = $1871$hi;
      i64toi32_i32$3 = $1871;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $1872 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = $1865;
      HEAP32[i64toi32_i32$1 >> 2] = $1872;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1889 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1889 = $3_1
      }
      $1890 = $1889;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$4 = $17_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $1893$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $1893$hi;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $1895 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = $1890;
      HEAP32[i64toi32_i32$5 >> 2] = $1895;
      HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1912 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1912 = $3_1
      }
      $1913 = $1912;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$4 = $17_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$4 = $1913;
      HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
      $3_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 32 | 0 | 0);
       $1932 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      } else {
       $1932 = $3_1
      }
      $1933 = $1932;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$4 = 1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$0 = $1933;
      HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $3_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
     }
     $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$128
     }
     break label$128;
    }
   }
   $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (($3_1 | 0) != ($2_1 | 0)) {
    label$139 : while (1) {
     i64toi32_i32$2 = $22($1_1 + 16 | 0 | 0, (($3_1 - $2_1 | 0) >> 3 | 0) + -1 | 0 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     $3_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + -8 | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
     label$140 : {
      $1967 = i64toi32_i32$1;
      $1967$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $142 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $142 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $18_1 = $142;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1967$hi;
      i64toi32_i32$0 = $1967;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if ((i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0) < (0 | 0)) {
       break label$140
      }
      i64toi32_i32$2 = $17$hi;
      $2_1 = $17_1;
      if (($5_1 | 0) <= ($2_1 | 0)) {
       break label$140
      }
      i64toi32_i32$2 = $18$hi;
      $4_1 = $18_1;
      if (($5_1 | 0) <= ($4_1 | 0)) {
       break label$140
      }
      $2_1 = Math_imul($4_1, $5_1) + $2_1 | 0;
      $4_1 = $8_1 + $2_1 | 0;
      $7_1 = HEAPU8[$4_1 >> 0] | 0;
      if ($7_1 & 8 | 0) {
       break label$140
      }
      if ((HEAPU8[(($10_1 + ($2_1 << 1 | 0) | 0) + 1 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$140
      }
      HEAP8[$4_1 >> 0] = $7_1 | 8 | 0;
      $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($3_1 | 0) == (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $2018 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $2018 = $3_1
      }
      $2019 = $2018;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      $2022 = $18_1;
      $2022$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2025 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $2025$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2022$hi;
      i64toi32_i32$5 = $2022;
      i64toi32_i32$0 = $2025$hi;
      i64toi32_i32$3 = $2025;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $2026 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = $2019;
      HEAP32[i64toi32_i32$5 >> 2] = $2026;
      HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $2043 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $2043 = $3_1
      }
      $2044 = $2043;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $2047$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $2047$hi;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $2049 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      i64toi32_i32$4 = $2044;
      HEAP32[i64toi32_i32$4 >> 2] = $2049;
      HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $2066 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $2066 = $3_1
      }
      $2067 = $2066;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = $2067;
      HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      $3_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
       $19($1_1 + 16 | 0 | 0);
       $2086 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      } else {
       $2086 = $3_1
      }
      $2087 = $2086;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$2 = 1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = $2087;
      HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
      $3_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
     }
     $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$139
     }
     break label$139;
    }
   }
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   continue label$9;
  };
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $39 = 0, $49 = 0;
  $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
  if (!$1_1) {
   $1_1 = $4(20 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 20 | 0;
   return;
  }
  $1_1 = ($1_1 | 0) / (20 | 0) | 0;
  $4_1 = $1_1 << 1 | 0;
  $3_1 = $4(Math_imul($1_1, 40) | 0) | 0;
  label$2 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$2
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
    $1_1 = $3_1;
    label$4 : while (1) {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $39 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[$1_1 >> 2] = $39;
     HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $49 = i64toi32_i32$1;
     i64toi32_i32$1 = $1_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $49;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1_1 = $1_1 + 20 | 0;
     $2_1 = $2_1 + 20 | 0;
     if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$4
     }
     break label$4;
    };
    $2_1 = HEAP32[$0_1 >> 2] | 0;
   }
   if (!$2_1) {
    break label$2
   }
   $1_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + Math_imul($4_1, 20) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + Math_imul(((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0 | 0) / (20 | 0) | 0, 20) | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $3_1 = 0, $9_1 = Math_fround(0), $5_1 = 0, $4_1 = 0, $6_1 = 0, $66 = 0, $76 = 0, $90 = 0, $100 = 0, $70 = 0, $94 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  if (($3_1 | 0) != ($5_1 | 0)) {
   $4_1 = $0_1 + 72 | 0;
   label$2 : while (1) {
    label$3 : {
     if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
      break label$3
     }
     label$4 : {
      $6_1 = $3_1 + 12 | 0;
      $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) + Math_fround(-50.0)) / Math_fround(20.0));
      $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
      $9_1 = Math_fround($2_1 | 0);
      if ($7_1 < $9_1 ^ 1 | 0 | ($7_1 >= Math_fround(0.0) ^ 1 | 0) | 0) {
       break label$4
      }
      $8_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) + Math_fround(-50.0)) / Math_fround(20.0));
      if ($8_1 >= Math_fround(0.0) ^ 1 | 0 | ($8_1 < $9_1 ^ 1 | 0) | 0) {
       break label$4
      }
      $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
      if (HEAPU8[($1_1 + 16 | 0) >> 0] | 0) {
       $1_1 = (HEAPU8[($1_1 + 17 | 0) >> 0] | 0) ^ 1 | 0;
       label$6 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
         $66 = ~~$7_1;
         break label$6;
        }
        $66 = -2147483648;
       }
       $2_1 = Math_imul($66, $2_1);
       $70 = $4_1;
       label$8 : {
        if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
         $76 = ~~$8_1;
         break label$8;
        }
        $76 = -2147483648;
       }
       (wasm2js_i32$0 = $18($70 | 0, $76 + $2_1 | 0 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
       break label$4;
      }
      $1_1 = HEAPU8[($1_1 + 18 | 0) >> 0] | 0;
      label$10 : {
       if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
        $90 = ~~$7_1;
        break label$10;
       }
       $90 = -2147483648;
      }
      $2_1 = Math_imul($90, $2_1);
      $94 = $4_1;
      label$12 : {
       if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
        $100 = ~~$8_1;
        break label$12;
       }
       $100 = -2147483648;
      }
      (wasm2js_i32$0 = $18($94 | 0, $100 + $2_1 | 0 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP8[(wasm2js_i32$0 + 1 | 0) >> 0] = wasm2js_i32$1;
     }
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$3
     }
     $7_1 = Math_fround(HEAPF32[$6_1 >> 2]);
     $8_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
     label$14 : while (1) {
      label$15 : {
       $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       if ($9_1 <= $8_1 ^ 1 | 0) {
        break label$15
       }
       if (Math_fround($9_1 + Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) > $8_1 ^ 1 | 0) {
        break label$15
       }
       $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       if ($9_1 <= $7_1 ^ 1 | 0) {
        break label$15
       }
       if (Math_fround($9_1 + Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2])) > $7_1 ^ 1 | 0) {
        break label$15
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
       break label$3;
      }
      $1_1 = $1_1 + 20 | 0;
      if (($2_1 | 0) != ($1_1 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    $3_1 = $3_1 + 20 | 0;
    if (($3_1 | 0) != ($5_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0) >> 1 | 0;
  if (!($4_1 >>> 0 >= $1_1 >>> 0 ? ($1_1 | 0) >= (0 | 0) : 0)) {
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $7($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0);
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 + ($1_1 << 1 | 0) | 0 | 0;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
  if (!$1_1) {
   $1_1 = $4(8 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 8 | 0;
   return;
  }
  $4_1 = $1_1 >> 2 | 0;
  $1_1 = $4($1_1 << 1 | 0 | 0) | 0;
  label$2 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$2
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
    $2_1 = $1_1;
    label$4 : while (1) {
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2_1 = $2_1 + 8 | 0;
     $3_1 = $3_1 + 8 | 0;
     if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$4
     }
     break label$4;
    };
    $3_1 = HEAP32[$0_1 >> 2] | 0;
   }
   if (!$3_1) {
    break label$2
   }
   $2_1 = $3_1 + -4 | 0;
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($4_1 << 3 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $2_1 | 0) | 0;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $0_1 + -1 | 0;
  label$1 : {
   if (!$1_1) {
    if (($0_1 & 255 | 0) >>> 0 >= 3 >>> 0) {
     break label$1
    }
    return HEAP32[(((($0_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 1544 | 0) >> 2] | 0 | 0;
   }
   if (($0_1 & 255 | 0) >>> 0 >= 3 >>> 0) {
    break label$1
   }
   return HEAP32[(((($0_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 1556 | 0) >> 2] | 0 | 0;
  }
  fimport$7(1491 | 0);
  return 1510 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $27($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  $27($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
  HEAP8[($4_1 + 15 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  $25($0_1 | 0, $4_1 + 15 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0) >> 3 | 0;
  if (!($4_1 >>> 0 >= $1_1 >>> 0 ? ($1_1 | 0) >= (0 | 0) : 0)) {
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $7($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0);
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 + ($1_1 << 3 | 0) | 0 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0.0, $4_1 = 0.0, $1_1 = 0, $17_1 = 0, $28 = 0, $2_1 = Math_fround(0), $20_1 = 0;
  $3_1 = +fimport$9();
  if ($3_1 != +HEAPF64[$0_1 >> 3]) {
   label$2 : {
    $4_1 = $3_1 * 600.0;
    if (Math_abs($4_1) < 2147483648.0) {
     $17_1 = ~~$4_1;
     break label$2;
    }
    $17_1 = -2147483648;
   }
   $1_1 = $17_1;
   $20_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   label$4 : {
    $4_1 = $3_1 * 800.0;
    if (Math_abs($4_1) < 2147483648.0) {
     $28 = ~~$4_1;
     break label$4;
    }
    $28 = -2147483648;
   }
   fimport$10($20_1 | 0, $28 | 0, $1_1 | 0);
   $1_1 = fimport$3(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 1568 | 0) | 0;
   $2_1 = Math_fround($3_1);
   fimport$23($1_1 | 0, Math_fround($2_1), Math_fround($2_1));
   if ($1_1) {
    fimport$4($1_1 | 0)
   }
   HEAPF64[$0_1 >> 3] = $3_1;
  }
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
  $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
  $4_1 = $1_1 >>> 16 | 0 | $1_1 | 0;
  $1_1 = $4($4_1 + 1 | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    $3_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
    $3($1_1 | 0, $0_1 + 4 | 0 | 0, $3_1 + 1 | 0 | 0) | 0;
    break label$1;
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3($1_1 | 0, $2_1 | 0, $3_1 + 1 | 0 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $2_1 = $2_1 + -4 | 0;
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    fimport$7(1038 | 0)
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $4_1 + -6 | 0;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $15_1 = 0, $36 = 0, $44 = 0, $62 = 0;
  $5_1 = $2_1 - $1_1 | 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if ($2_1) {
    $15_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $15_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
  }
  $3_1 = $15_1;
  $4_1 = $0_1 + 4 | 0;
  label$3 : {
   $3_1 = $3_1 + $5_1 | 0;
   if (($2_1 + 6 | 0) >>> 0 < $3_1 >>> 0) {
    $24($0_1 | 0, $3_1 | 0);
    $36 = HEAP32[$0_1 >> 2] | 0;
   } else {
    $36 = $2_1
   }
   if ($36) {
    $44 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    break label$3;
   }
   $44 = $4_1 + (HEAPU8[($4_1 + 7 | 0) >> 0] | 0) | 0;
  }
  $3($44 | 0, $1_1 | 0, $5_1 | 0) | 0;
  label$7 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $62 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $3_1 | 0;
    break label$7;
   }
   HEAP8[($4_1 + 7 | 0) >> 0] = $3_1;
   $62 = $4_1 + ($3_1 & 255 | 0) | 0;
  }
  HEAP8[$62 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $26($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    $25($0_1 | 0, 1571 | 0, 1572 | 0) | 0;
    break label$1;
   }
   $4_1 = $3_1 + 16 | 0;
   $2_1 = $4_1;
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $5_1 = ($1_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$2_1 >> 0] = $1_1 - Math_imul($5_1, 10) | 0 | 48 | 0;
    $7_1 = $1_1 >>> 0 > 9 >>> 0;
    $1_1 = $5_1;
    if ($7_1) {
     continue label$3
    }
    break label$3;
   };
   $25($0_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1_1 | 0) <= (-1 | 0)) {
    HEAP8[($2_1 + 15 | 0) >> 0] = 45;
    $26($25($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 16 | 0 | 0) | 0 | 0, 0 - $1_1 | 0 | 0);
    break label$1;
   }
   $26($0_1 | 0, $1_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 var FUNCTION_TABLE = [null, $13, $14, $15];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "get_callback_buffer": $0, 
  "call": $1, 
  "callback": $1, 
  "memset": $2, 
  "memcpy": $3, 
  "malloc": $4, 
  "free": $5, 
  "main": $8
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "T3V0IG9mIG1lbW9yeQBEb3VibGUgZnJlZQByb290ADxjYW52YXMgaWQ9J2EnIC8+AGEAc3R5bGUAd2lkdGg6IDgwMHB4OyBoZWlnaHQ6NjAwOwB1bmV4cGVjdGVkIG1vdXNlIGVudGVyAHVuZXhwZWN0ZWQgbW91c2UgZG93bgB1bmV4cGVjdGVkIG1vdXNlIG1vdmUAdW5leHBlY3RlZCBtb3VzZSB1cAB1bmV4cGVjdGVkIG1vdXNlIGxlYXZlAEVSUk9SOiB2ZWN0b3Igb3V0IG9mIGJvdW5kczogAFsAXQB1bmV4cGVjdGVkIHRvdWNoIGRvd24AdW5leHBlY3RlZCB0b3VjaCBtb3ZlAHVuZXhwZWN0ZWQgdG91Y2ggdXAAd2hpdGUAIzY2NjY2NgAjZmZmZmZmACMwMDAwMDAAYmxhY2sAMTJweCBBcmlhbABWQ0MAQQBCAEMARABFAE9iamVjdGl2ZToAQyA9IE5PVCBBICgxIGdhdGUgZGVsYXkpAEQgPSBBIE5BTkQgQiAoMyBnYXRlIGRlbGF5KQBFID0gQSBYT1IgQiAoNCBnYXRlIGRlbGF5KQAjZGRhYTg4ACNkZDg4ODgAI2RkZGQ4OAB1bmV4cGVjdGVkIHNpbGljb24AACNmZmNjYWEAI2ZmYWFhYQAjZmZmZmFhACNhYWFhYWEAALsFAADDBQAAywUAAOcFAADvBQAA9wUAADJkADA=");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}